C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE VERPRINT
OBJECT MODULE PLACED IN .\Objects\verprint.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE verprint.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) D
                    -EBUG OBJECTEXTEND PRINT(.\Listings\verprint.lst) TABS(2) OBJECT(.\Objects\verprint.obj)

line level    source

   1          #include <verprint.h>
   2          #include <string.h>
   3          #include <reg51.h>
   4          /*funciones prototipo externas */
   5          
   6          extern void Debug_txt_Tibbo(unsigned char * str);
   7          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
   8          extern void Debug_chr_Tibbo(unsigned char Dat);
   9          extern void PantallaLCD(unsigned char cod_msg);
  10          extern void send_portERR(unsigned char cod_err);
  11          extern unsigned char  ValidaSensoresPaso(void);
  12          extern void clear_buffer();
  13          extern void Trama_print_cod_barras(unsigned char *msj,unsigned char vehiculo);
  14          extern void Cmd_LPR_Salida_print(unsigned char *msj,unsigned char vehiculo);
  15          extern void Block_read_Clock_Hex(unsigned char *datos_clock);
  16          extern unsigned char bcd_hex (unsigned char l_data);
  17          extern void PantallaLCD(unsigned char cod_msg);
  18          extern char lee_clk (unsigned char dir_clk);
  19          extern void Debug_chr_Tibbo32(unsigned long int dato);
  20          extern unsigned char hex_bcd (unsigned char byte);
  21          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  22          extern void wr_eeprom (unsigned char control,unsigned int Dir, unsigned char data_eeprom);
  23          extern void EscribirMemoria(unsigned char control,unsigned int  addres,unsigned char  *res);
  24          extern void LeerMemoria(unsigned int addres,unsigned char *res);
  25          extern void Leer_Memoria_banco(unsigned int addres,unsigned char *res,unsigned char lent);
  26          extern void Limpiar_memoria_ticket();
  27          
  28          /*variables externas*/
  29          extern unsigned char g_cEstadoComSoft;
  30          extern unsigned char g_cEstadoImpresion;
  31          extern unsigned char ValTimeOutCom;
  32          extern unsigned char buffer_ready;
  33          extern idata unsigned char rbuf [];
  34          extern  unsigned char g_cContByteRx;
  35          extern  unsigned char  USE_LPR;
  36          extern unsigned char Timer_wait;
  37          
  38          #define DIRIJASE_CAJA           90
  39          #define NO_REGISTRA             0x04
  40          #define RHORA           0x85
  41          #define RMIN            0x83
  42          sbit lock = P1^7;           //Relevo 
  43          /*----------------------------------------------------------------------------
  44          tiempo de delay entre funciones
  45          ------------------------------------------------------------------------------*/
  46          
  47          #define   TIME_CARD         20    //50
  48          #define   TIME_RX           200   //
  49          #define   TIME_PLACA        55
  50          #define   TIME_PULSADOR     3
  51          
  52          /*----------------------------------------------------------------------------
  53          definicion de recepcion serial 
  54          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 2   

  55          
  56          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  57          /*----------------------------------------------------------------------------
  58          Definiciones de sequencias de lectura de ticket 
  59          ------------------------------------------------------------------------------*/
  60          
  61          #define SEQ_INICIO            0X00  
  62          #define SEQ_LEECODIGO         0X01
  63          #define SEQ_SEND_SOFT         0X02
  64          #define SEQ_SEND_SOFT_QR      0x03
  65          #define SEQ_CMNCCN_PTO        0X04
  66          #define SEQ_REINTENTO         0X05
  67          /*---------------------------------------------------------------------------------
  68          definiciones de la pantalla
  69          -----------------------------------------------------------------------------------*/
  70          #define INGRESO                 0xFA
  71          #define BIENVENIDO              0XFE
  72          #define AUDIO_IN                0XA0    // RELE 1
  73          #define AUDIO_ENTER             0XA1    // RELE 2
  74          #define GRACIAS                 0XFF
  75          
  76          
  77          #define True                    0x01
  78          #define False                   0x00
  79          
  80          #define EE_NOSAVETICKET         0X299
  81          #define EE_DATA_TICKET1         0X400
  82          
  83          
  84          /*---------------------------------------------------------------------------------
  85          funcion que debuelve la posicion del inicio del primer caracter de numerico de 0 a 9
  86          -----------------------------------------------------------------------------------*/
  87          /*
  88          unsigned char num_num(unsigned char * p)  
  89          {
  90          unsigned char contador=0;
  91            while ((*p < 0x30)|| (*p > 0x39))
  92            {
  93              
  94              p++;
  95              contador++;
  96            }
  97            return contador;
  98          }
  99          */
 100          /*---------------------------------------------------------------------------------
 101          definiciones de la pantalla
 102          -----------------------------------------------------------------------------------*/
 103          unsigned char num_char(unsigned char * p,unsigned char chr) 
 104          {
 105   1      unsigned char contador=0;
 106   1        while (*p !=chr)
 107   1        {
 108   2          
 109   2          p++;
 110   2          contador++;
 111   2        }
 112   1        return contador;
 113   1      } 
 114          /*------------------------------------------------------------------------------------
 115          Solo valida año, mes, y dia
 116          ------------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 3   

 117          unsigned char check_fechaOut_2(unsigned char *buffer)
 118          {
 119   1        unsigned long int fecha_inicio,fecha_fin;
 120   1        unsigned char datos_clk[6];
 121   1        char temp;
 122   1        
 123   1        
 124   1          Block_read_Clock_Hex(datos_clk);                              /*leo el clock actual*/
 125   1          fecha_inicio =  datos_clk[0] * 365 + datos_clk[1] * 30 + datos_clk[2] ;
 126   1          fecha_fin = *(buffer ) * 365 + *(buffer + 1) * 30  + *(buffer + 2);
 127   1          
 128   1          Debug_txt_Tibbo((unsigned char *) "Fecha inicio: ");
 129   1          Debug_chr_Tibbo32(fecha_inicio);
 130   1          Debug_txt_Tibbo((unsigned char *) "\n");
 131   1        
 132   1          Debug_txt_Tibbo((unsigned char *) "Fecha fin: ");
 133   1          Debug_chr_Tibbo32(fecha_fin);
 134   1          Debug_txt_Tibbo((unsigned char *) "\n");
 135   1          if (fecha_fin == fecha_inicio )           
 136   1          {
 137   2            temp = True;
 138   2          }
 139   1          else
 140   1          {
 141   2            Debug_txt_Tibbo((unsigned char *) "El ticket no es del dia ");
 142   2            temp = False;
 143   2          }
 144   1            
 145   1      
 146   1        
 147   1        return temp;
 148   1      }
 149          unsigned char Bloque_Horario(unsigned char  * buffer)
 150          {
 151   1        unsigned char Estado_Horario; 
 152   1        unsigned int HoraNow, Hora_Ticket;
 153   1        
 154   1        /*La hora del momento de  salida del vehiculo*/
 155   1        /*la hora del momento de entrada del vehiculo*/
 156   1      
 157   1        Debug_txt_Tibbo((unsigned char *) "HORA AHORA: ");
 158   1        Debug_chr_Tibbo(lee_clk(RHORA));
 159   1        Debug_chr_Tibbo(lee_clk(RMIN));
 160   1        Debug_txt_Tibbo((unsigned char *) "\n");
 161   1        HoraNow = (lee_clk(RHORA) * 60) + (lee_clk(RMIN) );
 162   1        
 163   1        /* desde la hora en que puede ingresar vehiculo */
 164   1        
 165   1        
 166   1        Debug_txt_Tibbo((unsigned char *) "HORA DEL TICKET: ");
 167   1        
 168   1        
 169   1        
 170   1        Debug_chr_Tibbo(hex_bcd(*(buffer+3)));
 171   1        Debug_chr_Tibbo(hex_bcd(*(buffer+4)));
 172   1        Debug_txt_Tibbo((unsigned char *) "\n");
 173   1        Hora_Ticket = hex_bcd(*(buffer+3))* 60 + hex_bcd(*(buffer+4));
 174   1        if(Hora_Ticket < HoraNow )
 175   1          {
 176   2            Debug_txt_Tibbo((unsigned char *) "DESPUES DEL HORARIO PROGRAMADO\r\n");
 177   2            Estado_Horario = False;
 178   2          
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 4   

 179   2          }
 180   1          else
 181   1          {
 182   2            Debug_txt_Tibbo((unsigned char *) "EN HORARIO PROGRAMADO\r\n");
 183   2            Estado_Horario = True;
 184   2            
 185   2          }
 186   1          return Estado_Horario;
 187   1      }
 188          void set_Almacena_ticket_eeprom(unsigned char * ticket)
 189          {
 190   1        unsigned char dataee;
 191   1        dataee=rd_eeprom(0xa8,EE_NOSAVETICKET);
 192   1        if ((dataee<=25) )
 193   1        {
 194   2          /*primer dato de almacenamiento*/
 195   2          
 196   2          strcat(ticket,'\r');
 197   2          
 198   2          
 199   2            
 200   2            EscribirMemoria(0xa8,(unsigned int)(EE_DATA_TICKET1+(dataee*0x0f)),ticket);
 201   2            Debug_txt_Tibbo((unsigned char *) "SET ticket_memoria grabado: ");    
 202   2            Debug_txt_Tibbo((unsigned char *) ticket);  
 203   2            Debug_txt_Tibbo((unsigned char *) "\n");  
 204   2          /*graba el numero de datos*/
 205   2            dataee++;
 206   2            wr_eeprom(0xa8,EE_NOSAVETICKET,dataee);
 207   2            
 208   2            Debug_txt_Tibbo((unsigned char *) "Set Numero de ticket grabados: ");   
 209   2            Debug_chr_Tibbo(dataee);  
 210   2            Debug_txt_Tibbo((unsigned char *) "\n");
 211   2          
 212   2        } 
 213   1        else
 214   1        {
 215   2          dataee=0;
 216   2          EscribirMemoria(0xa8,EE_DATA_TICKET1+(unsigned int)(dataee*0x0f),ticket);
 217   2          dataee++;
 218   2          wr_eeprom(0xa8,EE_NOSAVETICKET,dataee);
 219   2          
 220   2        }
 221   1        
 222   1        
 223   1      }
 224          
 225          unsigned char Get_Almacena_ticket_eeprom(unsigned char * ticket)
 226          {
 227   1      unsigned char Ticket_eeprom[10];
 228   1      unsigned char dataee;
 229   1      unsigned int i;
 230   1      static unsigned char dbee;  
 231   1        dataee=rd_eeprom(0xa8,EE_NOSAVETICKET);
 232   1        
 233   1          if (dataee <= 25) 
 234   1          {
 235   2          
 236   2          //Debug_txt_Tibbo((unsigned char *) "numero de ticket grabados: ");           /*msj tipo de vehiculo */
 237   2          //Debug_chr_Tibbo(dataee);                                                    /*caracter del tipo de vehiculo*/
 238   2          //Debug_txt_Tibbo((unsigned char *) "\n");  
 239   2      
 240   2            for (dbee=0; dbee<dataee; dbee++)
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 5   

 241   2            {
 242   3              i=(unsigned int) (dbee * 0x0f);
 243   3              //Debug_txt_Tibbo((unsigned char *) "numero de posicion memoria: ");            /*msj tipo de vehiculo */
 244   3              //Debug_chr_Tibbo(dbee);                                                    /*caracter del tipo de vehiculo*/
 245   3              //Debug_txt_Tibbo((unsigned char *) "\n");  
 246   3              
 247   3               LeerMemoria((EE_DATA_TICKET1 + i),Ticket_eeprom);
 248   3            
 249   3              
 250   3              Debug_txt_Tibbo((unsigned char *) "addres ticket eeprom: ");            /*msj tipo de vehiculo */
 251   3              Debug_chr_Tibbo32(EE_DATA_TICKET1 + i);                                         /*caracter del tipo de vehiculo*/
 252   3              Debug_txt_Tibbo((unsigned char *) "\n");  
 253   3              
 254   3              Debug_txt_Tibbo((unsigned char *) "ticket_memoria: ");    
 255   3              Debug_txt_Tibbo((unsigned char *) Ticket_eeprom); 
 256   3              Debug_txt_Tibbo((unsigned char *) "\n");  
 257   3          
 258   3              if ((strcmp(Ticket_eeprom,ticket)) == 0)  
 259   3                {
 260   4                  Debug_txt_Tibbo((unsigned char *) "ok esta en memoria  ");  
 261   4                  return 0;
 262   4                  break;
 263   4                }
 264   3              }
 265   2          
 266   2        
 267   2        
 268   2         }
 269   1          else
 270   1          {
 271   2            Limpiar_memoria_ticket();
 272   2          }
 273   1          
 274   1        return(0xFF);
 275   1      }
 276          /*--------------------------------------------------------------------------------------------------------
             ------------------
 277          procedimiento que lee el codigo de barra o el QR
 278          SEQ_INICIO=00 se detecta la presencia vehicular 
 279          SEQ_QUEST_PRINT=1 si fue  presionado el boton 
 280          ----------------------------------------------------------------------------------------------------------
             ------------------*/
 281          
 282          void Lee_ticket(void)
 283          {
 284   1        static unsigned char paso_una_vez=0;
 285   1        static unsigned char Ticket[10];
 286   1      //  static unsigned char Ticket_copia[10];
 287   1        unsigned char fecha[11];
 288   1        static unsigned char fecha2[10];
 289   1        unsigned char temp,temp2,vehiculo;
 290   1        unsigned char *tipo_vehiculo;
 291   1        switch (g_cEstadoImpresion)
 292   1        {
 293   2          case SEQ_INICIO:
 294   2          /*detecta el vehiculo en el loop*/
 295   2            
 296   2          if (ValTimeOutCom==1)                                                                 /*tiempo de espera */
 297   2          {
 298   3            lock=0;
 299   3            
 300   3            if (ValidaSensoresPaso()!=0)                                                        /*pregunto q alla presencia vehicular*/
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 6   

 301   3            {
 302   4              Debug_txt_Tibbo((unsigned char *) "\r\n\Vehiculo en el loop\r\n");                  /* se encuentra un sensor a
             -ctivo*/
 303   4              PantallaLCD(BIENVENIDO);                                                          /*msj acerque el ticket*/
 304   4              if(paso_una_vez==0)
 305   4              {
 306   5              send_portERR(AUDIO_IN);                                                           /*habilito el audio de entrada*/
 307   5              paso_una_vez=1;
 308   5              }                           
 309   4              ValTimeOutCom=TIME_RX;
 310   4              g_cEstadoImpresion=SEQ_LEECODIGO;                                                   /*volvemos a preguntar  */  
 311   4                    
 312   4              
 313   4            
 314   4            }
 315   3            else
 316   3              {
 317   4              Debug_txt_Tibbo((unsigned char *) "Vehiculo no en el loop\r\n\r\n");              /* no hay vehiculo en el lo
             -op*/
 318   4              paso_una_vez=0;                                               
 319   4              ValTimeOutCom=TIME_PULSADOR;
 320   4              g_cEstadoImpresion=SEQ_INICIO;                                                    /*volvemos a preguntar  */  
 321   4                    
 322   4              }
 323   3          }
 324   2          break;
 325   2      /*--------------------------------------------------------------------------------------------------------
             ------------------------------------
 326   2      SEQ_LEECODIGO 
 327   2      lee el dato en el pto serial del codigo qr
 328   2      ----------------------------------------------------------------------------------------------------------
             -------------------------------------*/    
 329   2          case SEQ_LEECODIGO:
 330   2            if ((ValTimeOutCom == 1)||(buffer_ready != 0))
 331   2            {
 332   3              if (buffer_ready == 1)
 333   3              {
 334   4                /*trama con codigo QR*/
 335   4                Debug_txt_Tibbo((unsigned char *) "trama del lector datalogic cod QR");             /*la respuesta es desco
             -nocida*/
 336   4                Debug_txt_Tibbo(rbuf);                                                              /*imprimo la trama recibida*/
 337   4                Debug_txt_Tibbo((unsigned char *) "\r\n");
 338   4                ValTimeOutCom=TIME_CARD;                                            
 339   4                g_cEstadoImpresion=SEQ_SEND_SOFT_QR ;   
 340   4                                                                                                    /* buffer del pto serie (0) inicia a esperar la trama*/
 341   4               
 342   4              }
 343   3              else if (buffer_ready == 2)
 344   3              {
 345   4                /*codigo de barras*/
 346   4                strcpy(Ticket,rbuf);                                                                /*salvo el buffer*/
 347   4                temp=strlen(rbuf);                                                                  /*longitud del buffer*/
 348   4                Ticket[temp-1]=0;
 349   4                Ticket[temp]=0;
 350   4                if (temp>10)
 351   4                {
 352   5                clear_buffer();
 353   5                PantallaLCD(BIENVENIDO);
 354   5                ValTimeOutCom=TIME_RX;
 355   5                g_cEstadoImpresion=SEQ_LEECODIGO; 
 356   5                break;
 357   5                }
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 7   

 358   4                /*COD DE BARRAS*/ 
 359   4                Debug_txt_Tibbo((unsigned char *) "trama del lector datalogic cod barras");           /*la respuesta es de
             -sconocida*/
 360   4                Debug_txt_Tibbo(Ticket);                                                                /*imprimo la trama recibida*/
 361   4                Debug_txt_Tibbo((unsigned char *) "\r\n");
 362   4                                                          
 363   4              
 364   4                                                                                        /* buffer del pto serie (0) inicia a esperar la trama*/
 365   4                
 366   4                g_cEstadoImpresion=SEQ_SEND_SOFT  ;   
 367   4              }
 368   3              else
 369   3              {
 370   4                /*respuesta incorrecta limpia buffer lee otra vez*/
 371   4                clear_buffer();
 372   4                paso_una_vez=0;
 373   4                buffer_ready=0;   
 374   4                Debug_txt_Tibbo((unsigned char *) "trama del lector datalogic no esta completa\r\n");             /*la resp
             -uesta es desconocida*/
 375   4                ValTimeOutCom=TIME_PULSADOR;
 376   4                g_cEstadoImpresion=SEQ_INICIO;  
 377   4                }
 378   3                      
 379   3            
 380   3              
 381   3            } 
 382   2          break;
 383   2          case SEQ_SEND_SOFT:
 384   2            
 385   2              /*codigo de barras*/
 386   2              Debug_txt_Tibbo((unsigned char *) "cod barras");  
 387   2              buffer_ready=0; 
 388   2              vehiculo='C';
 389   2              Trama_print_cod_barras(Ticket,vehiculo);
 390   2          
 391   2            if(USE_LPR)
 392   2              {
 393   3              Cmd_LPR_Salida_print(Ticket,vehiculo);                                                /*envio datos a Monitor*/
 394   3              }
 395   2              ValTimeOutCom=TIME_PLACA;
 396   2              g_cEstadoImpresion=SEQ_CMNCCN_PTO ;   
 397   2            
 398   2            
 399   2            break;
 400   2            
 401   2          case  SEQ_SEND_SOFT_QR:
 402   2            /*es un codigo QR*/
 403   2            //  ES = 0;                             /*inactivo pto serie y analizo el dato*/
 404   2          
 405   2          /*se tiene la lectura del codigo QR*/
 406   2            if (ValTimeOutCom==1)
 407   2            {
 408   3          
 409   3              Debug_txt_Tibbo((unsigned char *) "cod QR r\n");
 410   3              /*codigo qr*/
 411   3              buffer_ready=0;                                                     /*limpio el testigo de recepcion de datos serie*/
 412   3              
 413   3              temp=num_char(rbuf,':')+2;                                                  /*funcion que pregunta donde empieza el primer nume
             -ro del ticket*/
 414   3              temp2=num_char(rbuf+temp,'>');                                      /*busca un caracter en la trama*/
 415   3              if ((tipo_vehiculo=strstr(rbuf,"Carro"))!= 0)                       /*pregunto el tipo de vehiculo grabado en el 
             -codigo QR*/
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 8   

 416   3                {
 417   4                vehiculo='C';
 418   4                }
 419   3              else
 420   3                {
 421   4                vehiculo='M';
 422   4                }
 423   3              Debug_txt_Tibbo((unsigned char *) "tipo de vehiculo: ");            /*msj tipo de vehiculo */
 424   3              Debug_chr_Tibbo(vehiculo);                                          /*caracter del tipo de vehiculo*/
 425   3              Debug_txt_Tibbo((unsigned char *) "\n");                            /*final de linea*/
 426   3              
 427   3              Debug_txt_Tibbo((unsigned char *) "longitud de la trama ticket: \n");     /*msj longitud de la trama */
 428   3              Debug_chr_Tibbo(temp);                                              /*numero de inicio del ticket*/
 429   3              Debug_txt_Tibbo((unsigned char *) "\n");                            /*final de linea*/                          
 430   3              Debug_chr_Tibbo(temp2);                                             /*numero de caracteres del ticket*/
 431   3              Debug_txt_Tibbo((unsigned char *) "\n");                            /*final de linea*/
 432   3             
 433   3              Ticket[0]=0;
 434   3              if((temp<= 0x0f ) || (temp>= 0x0c ))                                                      /*la trama debe iniciar en 0x0c*/
 435   3              { 
 436   4                strncpy(Ticket,rbuf+temp,temp2);                                    /*copio el numero de ticket*/
 437   4                Ticket[temp2]=0;                                                    /*finalizo la trama con (0)*/
 438   4                      
 439   4                Debug_txt_Tibbo(Ticket);                                            /*imprimo el numero de ticket*/
 440   4                Debug_txt_Tibbo((unsigned char *) "\n");                            /*final de linea*/
 441   4              /*----------------------------------------------------*/
 442   4              /*buscamos la fecha de salida  en el ticket*/
 443   4                
 444   4                temp=num_char(rbuf+temp,':')+temp;
 445   4                temp2=num_char(rbuf+temp,'>');
 446   4                Debug_txt_Tibbo((unsigned char *) "longitud de la trama fecha: \n");
 447   4                Debug_chr_Tibbo(temp);  
 448   4                Debug_chr_Tibbo(temp2);                                             /*numero de caracteres del ticket*/
 449   4                Debug_txt_Tibbo((unsigned char *) "\n");  
 450   4                strncpy(fecha,rbuf+temp+2,temp2);
 451   4                fecha[temp2-2]=0;
 452   4                /*se pasa de bcd a hex para comparacion*/
 453   4                /*año*/
 454   4                fecha2[0]=bcd_hex((fecha[2]-0x30)<<4 | fecha[3]-0x30);
 455   4                /*mes*/
 456   4                fecha2[1]=bcd_hex((fecha[5]-0x30)<<4 | fecha[6]-0x30);
 457   4                /*dia*/
 458   4                fecha2[2]=bcd_hex((fecha[8]-0x30)<<4 | fecha[9]-0x30);
 459   4                /*horas*/
 460   4                fecha2[3]=bcd_hex((fecha[0x0b]-0x30)<<4 | fecha[0xc]-0x30);
 461   4                /*minutos*/
 462   4                fecha2[4]=bcd_hex((fecha[0x0e]-0x30)<<4 | fecha[0xf]-0x30);
 463   4                /*--------------------------------------------------*/
 464   4                Debug_txt_Tibbo((unsigned char *) "Fecha de salida: ");           /*msj tipo de vehiculo */
 465   4                Debug_txt_Tibbo((unsigned char *)fecha);                                          /*caracter del tipo de vehiculo*/
 466   4                Debug_txt_Tibbo((unsigned char *) "\n");                          /*final de linea*/          
 467   4                
 468   4                if (check_fechaOut_2(fecha2)!= True)
 469   4                {
 470   5                  /*dirijase a caja*/
 471   5                  PantallaLCD(DIRIJASE_CAJA);
 472   5                  g_cEstadoImpresion=SEQ_LEECODIGO;   
 473   5                  break;
 474   5                }
 475   4                if(Bloque_Horario(fecha2) != True)
 476   4                {
 477   5                  /*dirijase a caja*/
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 9   

 478   5                  PantallaLCD(DIRIJASE_CAJA);
 479   5                  g_cEstadoImpresion=SEQ_LEECODIGO;   
 480   5                  break;
 481   5                }
 482   4                Trama_print_cod_barras(Ticket,vehiculo);                            /*envio la trama al pto paralelo y es enviada a
             -l principal el cual comunica con acces*/
 483   4              
 484   4              
 485   4                if(USE_LPR)
 486   4                {
 487   5                Cmd_LPR_Salida_print(Ticket,vehiculo);                                /*envio datos a Monitor*/
 488   5                }
 489   4              
 490   4              ValTimeOutCom=TIME_PLACA;
 491   4              g_cEstadoImpresion=SEQ_CMNCCN_PTO ; 
 492   4              break;
 493   4            }
 494   3            else
 495   3            {
 496   4                ES = 1;
 497   4                clear_buffer();
 498   4                ValTimeOutCom=TIME_RX;
 499   4                g_cEstadoImpresion=SEQ_LEECODIGO;   
 500   4              
 501   4            }
 502   3          }
 503   2          break;
 504   2          case SEQ_CMNCCN_PTO:
 505   2            
 506   2            /*pregunta si ya esta grabado*/
 507   2            if(Get_Almacena_ticket_eeprom(Ticket)== 0xff)
 508   2            {
 509   3            /*no esta grabado procedemos a grabar el ticket*/
 510   3              set_Almacena_ticket_eeprom(Ticket);
 511   3              ValTimeOutCom=TIME_CARD;
 512   3              clear_buffer();
 513   3              paso_una_vez=0;      
 514   3              g_cEstadoImpresion=SEQ_INICIO;
 515   3              lock=1;
 516   3              break;
 517   3            }
 518   2            else
 519   2            {
 520   3            /*ya salio el ticket*/
 521   3              Debug_txt_Tibbo((unsigned char *) "ya salio el ticket  ");  
 522   3              PantallaLCD(NO_REGISTRA);
 523   3              lock=0;
 524   3              ES = 1;                                                                             /*habilito pto*/
 525   3              ValTimeOutCom=TIME_CARD;
 526   3              clear_buffer();
 527   3              paso_una_vez=0;      
 528   3              g_cEstadoImpresion=SEQ_INICIO;
 529   3            }
 530   2              
 531   2            if (ValTimeOutCom==1)
 532   2            {
 533   3              lock=0;
 534   3              ES = 1;                                                                             /*habilito pto*/
 535   3              Debug_txt_Tibbo((unsigned char *) "fin de lectura de trama\r\n");                   /*la respuesta es desconoci
             -da*/
 536   3              //PantallaLCD(GRACIAS);
 537   3              ValTimeOutCom=TIME_PULSADOR;
C51 COMPILER V9.59.0.0   VERPRINT                                                          11/16/2021 16:26:53 PAGE 10  

 538   3              clear_buffer();
 539   3              paso_una_vez=0;      
 540   3              g_cEstadoImpresion=SEQ_INICIO;
 541   3            }
 542   2            break;
 543   2          default:
 544   2          g_cEstadoImpresion=SEQ_INICIO;
 545   2          break;
 546   2        
 547   2          case SEQ_REINTENTO:
 548   2            if (ValTimeOutCom==1)
 549   2            {
 550   3              Debug_txt_Tibbo((unsigned char *) "REENVIA TRAMA PTO PARALELO\r\n ");           /*msj tipo de vehiculo */
 551   3              
 552   3              Trama_print_cod_barras(Ticket,vehiculo);  
 553   3              ValTimeOutCom=TIME_PLACA;
 554   3              g_cEstadoImpresion=SEQ_CMNCCN_PTO ; 
 555   3            }
 556   2              break;    
 557   2        }
 558   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2159    ----
   CONSTANT SIZE    =    638    ----
   XDATA SIZE       =     22      61
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
