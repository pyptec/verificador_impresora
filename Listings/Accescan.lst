C51 COMPILER V9.59.0.0   ACCESCAN                                                          01/20/2020 12:19:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ACCESCAN
OBJECT MODULE PLACED IN .\Objects\Accescan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Accescan.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) D
                    -EBUG OBJECTEXTEND PRINT(.\Listings\Accescan.lst) TABS(2) OBJECT(.\Objects\Accescan.obj)

line level    source

   1          #include <Accescan.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          extern void Block_write_clock_ascii(unsigned char *datos_clock);
   5          extern void PantallaLCD(unsigned char cod_msg);
   6          extern void Reloj_Pantalla_Lcd();
   7          extern unsigned char rx_Data(void);
   8          extern void Debug_txt_Tibbo(unsigned char * str);
   9          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  10          extern void Debug_Dividir_texto();
  11          extern void tx_aux(unsigned char caracter);
  12          extern unsigned char Dir_board();
  13          extern void Block_read_clock_ascii(unsigned char *datos_clock);
  14          extern void Two_ByteHex_Decimal(unsigned char *buffer,unsigned char id_h,unsigned char id_l);
  15          extern void ByteHex_Decimal(unsigned char *buffer,unsigned char valorhex);
  16          extern void PantallaLCD(unsigned char cod_msg);
  17          extern void LCD_txt (unsigned char * msg,char enable_char_add );
  18          extern unsigned char  ValidaSensoresPaso(void);
  19          extern void tx_aux(unsigned char caracter);
  20          extern void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer);
  21          extern unsigned char hex_bcd (unsigned char byte);
  22          extern void Trama_pto_Paralelo_P(unsigned char *buffer_S1_B0,unsigned char *buffer_S1_B2,unsigned char cmd
             -);
  23          extern void  send_port(unsigned char *buffer_port, unsigned char length_char);
  24          extern void graba_serie(unsigned char *buffer);
  25          extern void graba_serie_ascii_hex(unsigned char *buffer);
  26          unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  27          extern unsigned long int  Leer_serie ();
  28          extern void serie_ascii_siceros_l(unsigned char *serie);
  29          extern void Cmd_LPR_Salida_wiegand(unsigned char *buffer);
  30          extern void send_portERR(unsigned char cod_err);
  31          
  32          
  33          extern unsigned char Timer_wait;
  34          extern unsigned char Tipo_Vehiculo;
  35          extern unsigned char USE_LPR;
  36          extern unsigned char  Debug_Tibbo;
  37          extern unsigned char xdata Buffer_Tibbo_rx[];
  38          extern unsigned char ValTimeOutCom;   
  39          extern unsigned char g_cEstadoImpresion;
  40          
  41          sbit rx_ip = P0^0;        
  42          sbit lock = P1^7;           //Relevo 
  43          sbit Atascado = P0^3;       //Rele de on/off del verificador o transporte
  44          sbit led_err_imp = P0^2;      //Error   
  45          
  46          #define AUDIO_ENTER             0XA1    // RELE 2
  47          
  48          #define STX                     02 
  49          #define ETX                     03 
  50          #define FUERA_DE_LINEA          0xb6
  51          #define ON_LINE                 0xAA
  52          
  53          /*mensajes de pantalla*/
C51 COMPILER V9.59.0.0   ACCESCAN                                                          01/20/2020 12:19:02 PAGE 2   

  54          #define BIENVENIDO              0XFE
  55          #define SIN_PAGO                0XE7
  56          #define LECTURA_DE_TARJETAS     0xB0
  57          #define GRACIAS                 0XFF
  58          
  59          #define SEQ_REINTENTO         0X05
  60          #define   TIME_PLACA        55
  61          #define SEQ_CMNCCN_PTO        0X04
  62          
  63          //unsigned char S1_B2[]={0x13, 0x03, 0x1D, 0x0B, 0x0E, 00, 00, 00, 00, 00, 0x01, 0x13, 0x03, 0x1D, 0x0E, 0
             -x1D};
  64          //unsigned char S1_B0[]={0x32, 0x31, 0x30, 0x37, 0x31, 0x35, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01};
  65          //unsigned char S_B[]={0xE7, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01};
  66          /*------------------------------------------------------------------------------
  67          Rutina q valida los cmd del pto paralelo
  68          ------------------------------------------------------------------------------*/
  69          void Valida_Trama_Pto(unsigned char *buffer, unsigned char length_trama)
  70          {
  71   1         unsigned char buff[11];
  72   1        /*-------------------------------CMD H reloj para el board y la pantalla lcd-----------------------------
             --------------*/
  73   1          if((length_trama==25)&&(*buffer==STX)&&(*(buffer+2)=='H')&&*(buffer+(length_trama-1))==ETX)                         
             -/*cmd de Accescan que me envia el reloj actualizado*/
  74   1          { 
  75   2            
  76   2            Block_write_clock_ascii(buffer+3);                                                                                /* se escribe el reloj de har
             -dware*/
  77   2          
  78   2            Reloj_Pantalla_Lcd();                                                                                             /* Escribo el reloj en la pantalla 
             -lcd*/
  79   2          
  80   2          }
  81   1          /*-------------------------------CMD B6 fuera de linea -------------------------------------------------
             -------------*/
  82   1          else if(*buffer==FUERA_DE_LINEA)                                                                                    /*cmd de Accescan que dice q e
             -sta fuera de linea*/
  83   1          {
  84   2            if (Timer_wait>=20)                                                                                               /* se envia el msj fuera de linea*/
  85   2            {                                                                                                                 /* con un tiempo de retardo =((1/(22118400/12
             -)*65535)*30)*/
  86   3              PantallaLCD(FUERA_DE_LINEA);
  87   3              led_err_imp=0;                                                                                                  /*error led on*/
  88   3              Timer_wait=0;
  89   3              lock=0;                                                                                                         /*relevo off despues de 1 minuto*/
  90   3              Atascado=0;
  91   3              //ValTimeOutCom=10;       
  92   3            }
  93   2            if ((Debug_Tibbo==0)&&(USE_LPR==1))
  94   2              {
  95   3              Debug_Tibbo=1;
  96   3              Debug_txt_Tibbo((unsigned char *) "LIVE\n");
  97   3            
  98   3              Debug_Tibbo=0;
  99   3              }
 100   2          }
 101   1          /*-------------------------------CMD AA en linea -------------------------------------------------------
             ------------*/
 102   1          else if (*buffer==ON_LINE)                                                                                          /*en linea*/
 103   1          {
 104   2            
 105   2            if (Timer_wait>=20)                                                                                               /* se envia el msj fuera de linea*/
 106   2            { 
C51 COMPILER V9.59.0.0   ACCESCAN                                                          01/20/2020 12:19:02 PAGE 3   

 107   3              Timer_wait=0;                                                                                                   /*se inicia el timer*/
 108   3              lock=0;
 109   3              led_err_imp=1;                                                                                                  /*relevo off despues de 1 minuto*/
 110   3              Atascado=0; 
 111   3              //ValTimeOutCom=10;
 112   3              if ((Debug_Tibbo==0)&&(USE_LPR==1))
 113   3              {
 114   4              Debug_Tibbo=1;
 115   4              Debug_txt_Tibbo((unsigned char *) "LIVE\n");
 116   4              
 117   4              Debug_Tibbo=0;
 118   4              }
 119   3            }
 120   2            
 121   2          } 
 122   1                        /*------------msj bienvenido--------------------------*/
 123   1          else if ((length_trama==19)&&(*buffer==STX)&&(*(buffer+1)=='O')&&*(buffer+(length_trama-1))==ETX)             
             -      /*mensaje de bienvenidos*/
 124   1          {
 125   2            PantallaLCD(BIENVENIDO);
 126   2          }
 127   1                      /*--------------msj Gracias-----------------------------*/
 128   1          else if ((length_trama==19)&&(*buffer==STX)&&(*(buffer+1)=='V')&&*(buffer+(length_trama-1))==ETX)
 129   1          {
 130   2            Debug_txt_Tibbo((unsigned char *) "open barrrera\n");
 131   2            length_trama=0;
 132   2            lock=1;   
 133   2            Timer_wait=10;  
 134   2            send_portERR(AUDIO_ENTER);
 135   2            ValTimeOutCom=TIME_PLACA;
 136   2            g_cEstadoImpresion=SEQ_CMNCCN_PTO ;     
 137   2          
 138   2            
 139   2            
 140   2          }
 141   1          else if ((length_trama==1)&&(*buffer==0xA1))                                                                        /*cmd 0xA1 audio caja qu
             -e es igual a no registra pago */
 142   1          {
 143   2               PantallaLCD(SIN_PAGO);
 144   2          }
 145   1                    /*-------------------------------CMD de wiegand---------------------------------------------------*
             -/
 146   1          else if ((length_trama==6)&&(*buffer==STX)&&(*(buffer+1)=='W')&&*(buffer+(length_trama-1))==ETX)                
             -    /* cmd q comunica con monitor po wigan*/
 147   1          {
 148   2              if (USE_LPR==1)
 149   2              {
 150   3                    /*-------------------------------mensaje en la pantalla--------------------------------------------
             --------*/
 151   3                    ByteHex_Decimal(buff,*(buffer+2));                                                                        /*convierto el primer byte_he
             -x a decimal    */
 152   3                    buff[3]=' ';
 153   3                    Two_ByteHex_Decimal(buff+4,*(buffer+3),*(buffer+4)) ;                                                     /*convierto un byte
             - de 16 bits a decimal*/                                                 
 154   3                  
 155   3                    PantallaLCD_LINEA_2(LECTURA_DE_TARJETAS,buff);
 156   3                                                                                                                              /*transmito el codigo de la tarjeta a la panta
             -lla lcd*/
 157   3                    /*-------------------------------------------------------------------------------------------------
             --------*/
 158   3                
 159   3                    while(!ValidaSensoresPaso());
C51 COMPILER V9.59.0.0   ACCESCAN                                                          01/20/2020 12:19:02 PAGE 4   

 160   3                      
 161   3                    Cmd_LPR_Salida_wiegand(buff);
 162   3              }                                                                             
 163   2              
 164   2              else
 165   2              {
 166   3                 /*-------------------------------mensaje en la pantalla---------------------------------------------
             -------*/
 167   3                    ByteHex_Decimal(buff,*(buffer+2));                                                                        /*convierto el primer byte_he
             -x a decimal    */
 168   3                    buff[3]=' ';
 169   3                    Two_ByteHex_Decimal(buff+4,*(buffer+3),*(buffer+4)) ;                                                     /*convierto un byte
             - de 16 bits a decimal*/                                                 
 170   3                    PantallaLCD_LINEA_2(LECTURA_DE_TARJETAS,buff);                                                            /*transmito el codigo d
             -e la tarjeta a la pantalla lcd*/
 171   3                                                                                                          
 172   3                /*---------------------------------------------------------------------------------------------------
             ------*/  
 173   3              
 174   3              }
 175   2          }
 176   1          else if ((length_trama==12)&&(*buffer==STX)&&*(buffer+(length_trama-1))==ETX)                                   /*graba e
             -l numero de consecutivo en eeprom*/
 177   1          {
 178   2            graba_serie_ascii_hex(buffer+1);
 179   2            
 180   2            
 181   2              Debug_txt_Tibbo((unsigned char *) "Grabacion Serie: ");                                                     /*trama recibida pto
             - paralelo */
 182   2              DebugBufferMF(buffer,length_trama,1);
 183   2              
 184   2            
 185   2          }
 186   1          else if (*buffer==0XAB)
 187   1          { 
 188   2              ValTimeOutCom=TIME_PLACA;
 189   2              g_cEstadoImpresion=SEQ_CMNCCN_PTO ; 
 190   2              //g_cEstadoImpresion=SEQ_REINTENTO  ; 
 191   2          }
 192   1          
 193   1      }
 194          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    791    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =   ----      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
