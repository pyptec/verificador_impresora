C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN .\Objects\Clock.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Clock.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\Clock.lst) TABS(2) OBJECT(.\Objects\Clock.obj)

line level    source

   1          
   2          #include <Clock.h>
   3          #include <reg51.h>
   4          
   5          /*funcion prototipo*/
   6          extern void Delay (void);
   7          extern void Delay_20us(unsigned int cnt);
   8          extern void Debug_Fecha_actual(unsigned char *buffer);
   9          extern float pow   (float x, float y);
  10          /*variables externas */
  11          extern unsigned char  Debug_Tibbo;
  12          
  13          sbit sck = P1^4 ;                 /* define I/O functions     */
  14          sbit io  = P1^5 ;
  15          sbit rst = P1^6 ;
  16          /*CMD DE ESCRITURA RELOJ*/
  17          #define WDIA            0x86
  18          #define WMES            0x88
  19          #define WANO            0x8C
  20          #define WHORA           0x84
  21          #define WMIN            0x82
  22          #define WSEG            0x80
  23          #define WDIA_SEMANA     0x8A
  24          /*CMD DE LECTURA DEL RELOJ*/
  25          #define RDIA            0x87
  26          #define RMES            0x89
  27          #define RANO            0x8D
  28          #define RHORA           0x85
  29          #define RMIN            0x83
  30          #define RSEG            0x81
  31          #define RDIA_SEMANA     0x8B
  32          
  33          unsigned char data_clk;
  34          //*********************************************************************************
  35          
  36          //*********************************************************************************
  37          void p_ck (void)
  38          {
  39   1          sck=1;
  40   1          Delay();
  41   1          sck=0;
  42   1      }
  43          //*********************************************************************************
  44          void eb_clk(char dir_clk) {
  45   1        int nbits;
  46   1        for (nbits=0; nbits<8; nbits++)
  47   1        {
  48   2          dir_clk >>=1;
  49   2          if (CY==1)
  50   2          { 
  51   3            io=1;
  52   3          }
  53   2          else
  54   2          {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 2   

  55   3            io=0;
  56   3          }
  57   2          p_ck();
  58   2        }
  59   1      }
  60          //*********************************************************************************
  61          char lee_clk (unsigned char dir_clk) {            
  62   1      int nbits;
  63   1        rst=1;
  64   1        Delay_20us(3);
  65   1        eb_clk(dir_clk);
  66   1        for (nbits=0; nbits<8; nbits++)
  67   1        {
  68   2          if (io==1) 
  69   2          {
  70   3          data_clk = data_clk | 0x80;
  71   3          if (nbits<=6) {
  72   4           data_clk >>=1;
  73   4           }
  74   3          }
  75   2          if (io==0)
  76   2          {
  77   3            data_clk = data_clk & 0x7F;
  78   3          if (nbits<=6) 
  79   3           {
  80   4            data_clk >>=1;
  81   4           }
  82   3          }
  83   2          p_ck();
  84   2          } 
  85   1        rst=0;
  86   1        return data_clk;
  87   1      }
  88          //*********************************************************************************
  89          void wr_clk (unsigned char dir_clk, unsigned char byte) {            
  90   1        rst=1;
  91   1        Delay_20us(3);
  92   1        eb_clk(dir_clk);
  93   1        dir_clk=byte;
  94   1        eb_clk(dir_clk);
  95   1        rst=0;
  96   1        
  97   1       }
  98          //****************************************************************************
  99           unsigned char two_one (unsigned char byte_h,unsigned char byte_l)
 100          {
 101   1        unsigned char byte_out;
 102   1        byte_h=byte_h&0x0f;
 103   1        byte_h<<=4;
 104   1        byte_l=byte_l&0x0f;
 105   1        byte_out=byte_h|byte_l;
 106   1        return byte_out;
 107   1      }
 108          /*------------------------------------------------------------------------------
 109          Escribo el reloj en ascii en bloque 
 110          ------------------------------------------------------------------------------*/
 111          
 112          void Block_write_clock_ascii(unsigned char *datos_clock)  
 113          
 114          {     
 115   1      //dia,mes,año,hora,minutos,segundos,Dia de la semana 
 116   1          
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 3   

 117   1            /*dia*/
 118   1            wr_clk(WDIA,two_one(*datos_clock,*(datos_clock+1)));                    //dia
 119   1            datos_clock++;
 120   1            datos_clock++;
 121   1            datos_clock++;
 122   1            /*mes*/
 123   1            wr_clk(WMES,two_one(*datos_clock,*(datos_clock+1)));                    //mes
 124   1            datos_clock++;
 125   1            datos_clock++;
 126   1            datos_clock++;
 127   1            datos_clock++;
 128   1            datos_clock++;
 129   1            /*año*/
 130   1            wr_clk(WANO,two_one(*datos_clock,*(datos_clock+1)));                    //año
 131   1            datos_clock++;
 132   1            datos_clock++;
 133   1            datos_clock++;
 134   1            /*hora*/
 135   1            wr_clk(WHORA,two_one(*datos_clock,*(datos_clock+1)));                   //hora
 136   1            datos_clock++;
 137   1            datos_clock++;
 138   1            datos_clock++;
 139   1            /*minutos*/
 140   1            wr_clk(WMIN,two_one(*datos_clock,*(datos_clock+1)));                    //minutos
 141   1            datos_clock++;
 142   1            datos_clock++;
 143   1            datos_clock++;
 144   1            /*segundos*/
 145   1            wr_clk(WSEG,two_one(*datos_clock,*(datos_clock+1)));                    //segundos
 146   1            datos_clock++;
 147   1            datos_clock++;
 148   1            datos_clock++;
 149   1            /*dia de la semana*/
 150   1            wr_clk(WDIA_SEMANA,(*datos_clock&0x0f));                                //dia de la semana
 151   1        
 152   1      }
 153          /*------------------------------------------------------------------------------
 154          rutinas de conversiones  de bcd a hex
 155          ------------------------------------------------------------------------------*/
 156          unsigned char bcd_hex (unsigned char l_data)
 157           {
 158   1        unsigned char temp,j;
 159   1        temp=l_data;
 160   1        temp>>=4;
 161   1        temp=temp & 0x0f;
 162   1        if (temp!=0x00)
 163   1        {
 164   2          l_data=l_data & 0x0f;
 165   2          for (j=0;j<temp;j++)
 166   2          {
 167   3              l_data=l_data+0x0a;
 168   3          } 
 169   2        }
 170   1        return l_data;
 171   1       }
 172           /*------------------------------------------------------------------------------
 173           Rutina que convierte de Hex a bcd 
 174          ------------------------------------------------------------------------------*/
 175          unsigned char hex_bcd (unsigned char byte)
 176           
 177          {
 178   1        unsigned char nibble_h; 
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 4   

 179   1        unsigned char nibble_l;
 180   1        unsigned char k,byte_out;
 181   1      
 182   1        nibble_h=0x00;
 183   1        nibble_l=0x00;
 184   1      
 185   1        for (k=0;k<byte;k++)
 186   1        {
 187   2          nibble_l=nibble_l+0x01;
 188   2          if (nibble_l==0x0a)
 189   2          {
 190   3            nibble_l=0x00;
 191   3            nibble_h=nibble_h+0x01;
 192   3          }
 193   2         }
 194   1         nibble_h<<=4;
 195   1         nibble_h=nibble_h & 0xf0;
 196   1         nibble_l=nibble_l & 0x0f;
 197   1         byte_out=(nibble_h | nibble_l);
 198   1         return byte_out;
 199   1        
 200   1      }
 201          
 202          /*------------------------------------------------------------------------------
 203            CONVIERTE DE 1BYTE HEXADECIMAL A DECIMAL                      
 204          valorhex= pasa el byte en Hex y lo convierte en decimal
 205          buffer=   se debuelve la conversion en un arreglo en ascii
 206          ------------------------------------------------------------------------------*/
 207          void ByteHex_Decimal(unsigned char *buffer,unsigned char valorhex)
 208          {
 209   1        unsigned char numero, centena, decena;
 210   1      
 211   1        centena=0;
 212   1        decena=0;
 213   1        numero=valorhex;
 214   1      
 215   1        while (numero>=0x064)                           /* resto centena en ascii100*/
 216   1        {
 217   2          numero=numero-0x64;
 218   2          centena=centena+1;
 219   2        }
 220   1          *buffer=centena|0x30;
 221   1          buffer++;
 222   1        while (numero>=0x0a)                            /* resto 10 decena en ascii*/
 223   1        {
 224   2          numero=numero-0x0a;
 225   2          decena=decena+1;
 226   2        }
 227   1        *buffer=decena|0x30;
 228   1        buffer++;
 229   1        *buffer=numero|0x30;                            /*unidad en ascii */
 230   1        
 231   1      
 232   1      }
 233          /*------------------------------------------------------------------------------
 234            CONVIERTE DE 2BYTE HEXADECIMAL A DECIMAL                      
 235          
 236          ------------------------------------------------------------------------------*/
 237          void Two_ByteHex_Decimal(unsigned char *buffer,unsigned char id_h,unsigned char id_l)
 238          {
 239   1        unsigned int valor,numero;
 240   1        unsigned char temp,dmil, mil, centena, decena;
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 5   

 241   1      
 242   1        valor=0;
 243   1        dmil=0;
 244   1        mil=0;
 245   1        centena=0;
 246   1        decena=0;
 247   1        
 248   1         
 249   1        temp=id_h;
 250   1        temp=temp&0xf0;
 251   1        temp>>=4;
 252   1      
 253   1        valor=valor+(pow(16,3))*temp;
 254   1        temp=id_h;
 255   1        temp=temp&0x0f;
 256   1        valor=valor+(pow(16,2))*temp;
 257   1      
 258   1        temp=id_l;
 259   1        temp=temp&0xf0;
 260   1        temp>>=4;
 261   1        valor=valor+(pow(16,1))*temp;
 262   1        temp=id_l;
 263   1        temp=temp&0x0f;
 264   1        valor=valor+(pow(16,0))*temp;
 265   1        numero=valor;
 266   1      
 267   1        while (numero>=0x2710)        // resto 10.000 
 268   1        {
 269   2          numero=numero-0x2710;
 270   2          dmil=dmil+1;
 271   2        }
 272   1        *buffer=dmil|0x30;
 273   1          buffer++;
 274   1        while (numero>=0x03e8)        // resto 1.000
 275   1        {
 276   2          numero=numero-0x03e8;
 277   2          mil=mil+1;
 278   2        }
 279   1        *buffer=mil|0x30;
 280   1          buffer++;
 281   1        while (numero>=0x064)         // resto 100
 282   1        {
 283   2          numero=numero-0x64;
 284   2          centena=centena+1;
 285   2        }
 286   1        *buffer=centena|0x30;
 287   1          buffer++;
 288   1        while (numero>=0x0a)        // resto 10
 289   1        {
 290   2          numero=numero-0x0a;
 291   2          decena=decena+1;
 292   2        }
 293   1        *buffer=decena|0x30;
 294   1        buffer++;
 295   1        *buffer=numero|0x30;
 296   1        buffer++;
 297   1        *buffer=00;
 298   1        
 299   1      }
 300          /*------------------------------------------------------------------------------
 301           Lee el dato del reloj en bloque 
 302          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 6   

 303          void Block_read_clock_ascii(unsigned char *datos_clock)
 304          {
 305   1        unsigned char dato;
 306   1      
 307   1        //dia,mes,año,hora,minutos,segundos,Dia de la semana
 308   1          
 309   1          /*año*/
 310   1          dato=lee_clk(RANO);
 311   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 312   1          datos_clock++;
 313   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 314   1          datos_clock++;
 315   1        
 316   1        /*mes*/
 317   1          dato=lee_clk(RMES);
 318   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 319   1          datos_clock++;
 320   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 321   1          datos_clock++;    
 322   1      
 323   1          /*dia*/
 324   1          dato=lee_clk(RDIA);                       //;bcd_hex(lee_clk(DIA));
 325   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 326   1          datos_clock++;
 327   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 328   1          datos_clock++;
 329   1          
 330   1          
 331   1          /*hora*/            
 332   1          dato=lee_clk(RHORA);
 333   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 334   1          datos_clock++;
 335   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 336   1          datos_clock++;        
 337   1          
 338   1          /*minutos*/         
 339   1          dato=lee_clk(RMIN);
 340   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 341   1          datos_clock++;
 342   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 343   1          datos_clock++;  
 344   1        
 345   1          /*segundos*/    
 346   1          dato=lee_clk(RSEG);
 347   1          *datos_clock=((dato&0xf0)>>4)| 0x30;      /*dato parte alta*/
 348   1          datos_clock++;
 349   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 350   1          datos_clock++;
 351   1        
 352   1          /*dia de la semana*/
 353   1          dato=lee_clk(RDIA_SEMANA);
 354   1          *datos_clock=(dato&0x0f)| 0x30;           /*dato parte bajo*/
 355   1          datos_clock++;
 356   1          *datos_clock=0;
 357   1                      
 358   1      } 
 359          
 360          void Block_read_Clock_Hex(unsigned char *datos_clock)
 361          {
 362   1        
 363   1        /*año*/
 364   1        *datos_clock=bcd_hex(lee_clk(RANO));      
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 7   

 365   1         datos_clock++;
 366   1        /*mes*/
 367   1        *datos_clock=bcd_hex(lee_clk(RMES));      
 368   1         datos_clock++;
 369   1        /*Dia*/
 370   1        *datos_clock=bcd_hex(lee_clk(RDIA));      
 371   1         datos_clock++;
 372   1        /*hora*/  
 373   1        *datos_clock=bcd_hex(lee_clk(RHORA));     
 374   1         datos_clock++;
 375   1        /*minutos*/ 
 376   1        *datos_clock=bcd_hex(lee_clk(RMIN));      
 377   1         datos_clock++;
 378   1      
 379   1      }
 380          /*
 381          void Block_read_Clock_Hex_bcd(unsigned char *datos_clock)
 382          {
 383              
 384            /*año*/
 385            /**datos_clock=hex_bcd(lee_clk(RANO));      
 386             datos_clock++;
 387            /*mes*/
 388          /*  *datos_clock=hex_bcd(lee_clk(RMES));      
 389             datos_clock++;
 390            /*Dia*/
 391            /**datos_clock=hex_bcd(lee_clk(RDIA));      
 392             datos_clock++;
 393            /*hora*/  
 394            /**datos_clock=hex_bcd(lee_clk(RHORA));     
 395             datos_clock++;
 396            /*minutos*/ 
 397          /*  *datos_clock=hex_bcd(lee_clk(RMIN));      
 398             datos_clock++;
 399          }
 400          */
 401          /*------------------------------------------------------------------------------
 402           Lee el dato del reloj en bloque 
 403          ------------------------------------------------------------------------------*/
 404          void Block_read_Clock(unsigned char *datos_clock)
 405          {
 406   1        /*año*/ 
 407   1        *datos_clock=lee_clk(RANO);     
 408   1         datos_clock++;
 409   1        /*mes*/
 410   1        *datos_clock=lee_clk(RMES);     
 411   1         datos_clock++;
 412   1        /*Dia*/
 413   1        *datos_clock=lee_clk(RDIA);     
 414   1         datos_clock++;
 415   1        /*hora*/  
 416   1        *datos_clock=lee_clk(RHORA);      
 417   1         datos_clock++;
 418   1        /*minutos*/ 
 419   1        *datos_clock=lee_clk(RMIN);     
 420   1         datos_clock++;
 421   1        /*segundos*/  
 422   1        *datos_clock=lee_clk(RSEG);
 423   1        datos_clock++;
 424   1        *datos_clock=00;
 425   1          
 426   1      }
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 8   

 427          void cond_ini_clock()
 428          {
 429   1        sck=0;          //Reloj
 430   1        rst=0;
 431   1        io=1;
 432   1      }
 433          
 434          /*------------------------------------------------------------------------------
 435          funcion q verifica la fecha maxima de salida 
 436          VERIFICA PAGO (sin_pago)....                                      
 437          SI PAGO, VERIFICA QUE LA FECHA MAX DE SALIDA NO EXCEDE A LA ACTUAL (acceso_ok)              
 438          (0) pago parqueadero y esta entre el tiempo permitido
 439          (1) no hay pago
 440          (2) excede tiempo de gracia
 441          ------------------------------------------------------------------------------*/
 442          /*TEMPORARLMENTE FUERA DE SERVICIO POR SER EXPEDIDOR*/
 443          //char check_fechaOut(char *buffer)
 444          //{
 445          //  char temp=1;
 446          //  unsigned char datos_clk[6];
 447            
 448          
 449            /*se valida la fecha de salida si es cero no ha pagado*/
 450          
 451          //  if ((*buffer==0x00)&&(*(buffer+1)==0x00)&&(*(buffer+2)==0x00)&&(*(buffer+3)==0x00)&&(*(buffer+4)==0x00)
             -)
 452          //    {
 453              
 454          //    temp=1;                                                         /*no hay pago*/
 455                
 456          //    }
 457          //  else
 458          //  {
 459                
 460          //      Block_read_Clock_Hex(datos_clk);                              /*leo el clock actual*/
 461            
 462          //    if (Debug_Tibbo==1)
 463          //    {
 464          //       Debug_Fecha_actual(datos_clk);                               /*muestro la fecha y hora actual*/
 465                
 466          //    } 
 467                
 468              
 469          //    if (datos_clk[0]<*buffer)                                       /*comparo el año leido de board_pcb con el dato de salid
             -a leido en  la MF */
 470          //    {
 471          //      temp=0;                                                       /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 472          //    }
 473          //    else if (datos_clk[0]==*buffer)                                 /*el año es igual*/
 474          //    {
 475          //      if (datos_clk[1]<*(buffer+1))                                 /*comparo el mes*/
 476          //      {
 477          //        temp=0;                                                     /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 478          //      }
 479          //      else if (datos_clk[1]==*(buffer+1))                           /*el mes es igual*/
 480          //      {
 481          //        if (datos_clk[2]<*(buffer+2))                               /*se compara el dia*/
 482          //        {
 483          //            temp=0;                                                 /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 484          //        }
 485          //        else if(datos_clk[2]==*(buffer+2))                          /*el dia es igual*/
 486          //        {
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 9   

 487          //          if (datos_clk[3]<*(buffer+3))                             /*comparo la hora del board_pcb con el dato de salida d
             -e la MF*/
 488          //          {
 489          //                temp=0;                                             /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 490          //          }
 491          //          else if (datos_clk[3]==*(buffer+3))                       /*es igual la hora*/
 492          //          {
 493          //            if (datos_clk[4]<*(buffer+4))   //(minut<=minutOut)
 494          //            {
 495          //              temp=0;                                               /*el tiempo esta entre el tiempo de gracia y activa la salida*/
 496          //            }
 497          //            else 
 498          //            {
 499          //              temp=2;                                               /*Excede T.GRACIA*/
 500          //            }
 501          
 502          //          }
 503          //          else
 504          //          {
 505          //            temp=2;                                                 /*Excede T.GRACIA*/
 506          //          }
 507          //        }
 508          //        else
 509          //        {
 510          //          temp=2;                                                   /*Excede T.GRACIA*/
 511          //        } 
 512          //      }
 513          //      else
 514          //      {
 515          //        temp=2;                                                     /*Excede T.GRACIA*/
 516          //      }
 517          //    }
 518          //    else
 519          //    {
 520          //      temp=2;                                                       /*Excede T.GRACIA*/
 521          // 
 522          //    }
 523              
 524          //  }
 525          //  return temp;
 526          //}
 527          
 528          //*******************************************************************************************
 529          /*TEMPORALMENTE FUERA DE SERVICIO POR EXPEDIDOR PRINTER*/
 530          /*
 531          void analiza_tiempo(char *buffer,unsigned int Val_DctoMinutos)
 532          {
 533          
 534          
 535            int ano_inT;
 536            bit bisiesto=0;
 537          
 538            unsigned char ano_out, mes_out, dia_out, hora_out, min_out;
 539            unsigned char Horas_Dcto, Minutos_Dcto, Xtemp; 
 540          
 541            bit Tiempo_Dcto=0;
 542          
 543          if ((*(buffer+0x0b)==0x00)&&(*(buffer+0x0c)==0x00)&&(*(buffer+0x0d)==0x00)&&(*(buffer+0x0e)==0x00)&&(*(buf
             -fer+0x0f)==0x00))
 544          {
 545          */
 546          //--------------------------------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 10  

             -------------------------------------
 547          //  Descuento Maximo 999 minutos  = 16 Horas  39 Minutos
 548          //--------------------------------------------------------------------------------------------------------
             -------------------------------------
 549          /*
 550          if (Val_DctoMinutos >= 60 )
 551            {
 552              Horas_Dcto=Val_DctoMinutos/60;
 553              Minutos_Dcto=Val_DctoMinutos-(Horas_Dcto*60);
 554          
 555            }
 556            else
 557            {
 558              Minutos_Dcto=Val_DctoMinutos;
 559              Horas_Dcto=0;
 560            }
 561            */
 562          //********************************************************************************************************
             -*************************************
 563          //  Aumenta Primero Minutos
 564          //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 565          /* 
 566           if (Minutos_Dcto!=0)
 567            {
 568              min_out=*(buffer+4)+Minutos_Dcto;         
 569              if (min_out>59)                   // Si los minutos no sube de 60 no hay que aumentar nada
 570              {
 571          //----------------------------------------------------
 572                Xtemp=(int)(min_out/60);          // Numero de Horas a aumentar
 573                min_out=min_out-(Xtemp*60);         // Total de minutos
 574          //----------------------------------------------------
 575                hora_out=*(buffer+3)+Xtemp;         /*horas*/
 576          /*      if (hora_out>23)
 577                {
 578                  Xtemp= hora_out/24;             // Numero Dias a aumentar
 579                  hora_out=hora_out-(Xtemp*24);       // Total de Horas
 580          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 581                  dia_out=*(buffer+2)+Xtemp;
 582                  if ((*(buffer+1)==1)||(*(buffer+1)==3)||(*(buffer+1)==5)||(*(buffer+1)==7)||(*(buffer+1)==8)||(*(buffe
             -r+1)==10)||(*(buffer+1)==12))   // Meses de 31 dias
 583                  {
 584                    if (dia_out>31)
 585                    {
 586                      dia_out=dia_out-31;
 587                      mes_out=*(buffer+1)+1;
 588                      if (mes_out>12)
 589                      {
 590                        ano_out=*(buffer+0)+1;
 591                        mes_out=1;
 592                      }
 593                      else
 594                      {
 595                        ano_out=*(buffer+0);
 596                      }
 597                    }
 598                    else
 599                    {
 600                      mes_out=*(buffer+1);                        /*mes*/
 601          //            ano_out=*(buffer+0);                        /*año*/
 602          /*          } 
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 11  

 603                  }
 604                  else if ((*(buffer+1)==4)||(*(buffer+1)==6)||(*(buffer+1)==9)||(*(buffer+1)==11))                   // Meses de
             - 30 dias
 605                  {
 606                    if (dia_out>30)
 607                    {
 608                      dia_out=dia_out-30;
 609                      mes_out=*(buffer+1)+1;
 610                      ano_out=*(buffer+0);          
 611                    }
 612                    else
 613                    {
 614                      mes_out=*(buffer+1);
 615                      ano_out=*(buffer+0);  
 616                    }
 617          
 618                  }
 619                  else if (*(buffer+1)==2)                                        // Febtrero Es biciesto?
 620                  {
 621          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 622                    ano_inT=*(buffer+0)+2000;
 623                    bisiesto=0;
 624          
 625          /*
 626                    float flotante=12.345;
 627                    int entero;
 628          
 629                    entero=(int)flotante;
 630          */
 631            
 632          /*          division=(ano_inT/4);
 633                    intpart=division;
 634                    decpart= ano_inT - (intpart*4);
 635                    if (decpart==0)
 636                    {
 637                      division=(ano_inT/10);
 638                        intpart = division;
 639                        decpart = ano_inT - (intpart*10);
 640                      if (decpart==0)
 641                      {
 642                        division=(ano_inT/40);
 643                          intpart = division;
 644                          decpart = ano_inT - (intpart*40);
 645          
 646          
 647                        if (decpart==0)
 648                        {
 649                          bisiesto=1;
 650                        }
 651                        else
 652                        {
 653                          bisiesto=0;
 654                        }
 655                      }
 656                      else
 657                      {
 658                        bisiesto=1;
 659                      }
 660                    }
 661          */
 662          
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 12  

 663            /*        if ((*(buffer+0)==16)||(*(buffer+0)==20)||(*(buffer+0)==24)||(*(buffer+0)==28)||(*(buffer+0)==32)||
             -(*(buffer+0)==36))
 664                    {
 665                      bisiesto=1;
 666                    }   
 667          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------          
 668                    if (bisiesto==1)
 669                    {
 670                      if (dia_out>29)
 671                      {
 672                        ano_out=*(buffer+0);
 673                        dia_out=dia_out-29;
 674                        mes_out=*(buffer+1)+1;
 675                    
 676                      }
 677                      else
 678                      {
 679                        ano_out=*(buffer+0);  
 680                        dia_out=dia_out;
 681                        mes_out=*(buffer+1);
 682                      }
 683                    }
 684                    else
 685                    {
 686                      if (dia_out>28)
 687                      {
 688                        dia_out=dia_out-28;
 689                        mes_out=*(buffer+1)+1;
 690                        ano_out=*(buffer+0);
 691                      }
 692                      else
 693                      {
 694                        dia_out=dia_out;
 695                        mes_out=*(buffer+1);
 696                        ano_out=*(buffer+0);  
 697                      }
 698                    }
 699          //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 700                  }
 701                  else                                                // Error fecha
 702                  {
 703                    dia_out=dia_out;
 704                    mes_out=*(buffer+1);
 705                    ano_out=*(buffer+0);  
 706                  }
 707                }
 708                else
 709                {
 710                  dia_out=*(buffer+2);
 711                  mes_out=*(buffer+1);
 712                  ano_out=*(buffer+0);
 713                }
 714              }
 715              else
 716              {
 717                hora_out=*(buffer+3);
 718                dia_out=*(buffer+2);
 719                mes_out=*(buffer+1);
 720                ano_out=*(buffer+0);
 721              }
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 13  

 722            }
 723            else
 724            {
 725              min_out=*(buffer+4);
 726              hora_out=*(buffer+3);
 727              dia_out=*(buffer+2);
 728              mes_out=*(buffer+1);
 729              ano_out=*(buffer+0);
 730            }
 731          //********************************************************************************************************
             -*************************************
 732          //  AUMENTA HORAS
 733          //--------------------------------------------------------------------------------------------------------
             --------------------------------------
 734              if (Horas_Dcto!=0)
 735              {
 736                  hora_out=hora_out+Horas_Dcto;
 737                  if (hora_out>23)
 738                  {
 739                    Xtemp= hora_out/24;             // Numero Dias a aumentar
 740                    hora_out=hora_out-(Xtemp*24);       // Total de Horas
 741            //-------------------------------------------------------------------------------------------------------
             ----------------------------------------
 742                    dia_out=dia_out+Xtemp;
 743                    if ((mes_out==1)||(mes_out==3)||(mes_out==5)||(mes_out==7)||(mes_out==8)||(mes_out==10)||(mes_out==12
             -))    // Meses de 31 dias
 744                    {
 745                      if (dia_out>31)
 746                      {
 747                        dia_out=dia_out-31;
 748                        mes_out=mes_out+1;
 749                        if (mes_out>12)
 750                        {
 751                          ano_out=ano_out+1;
 752                          mes_out=1;
 753                        }
 754                        else
 755                        {
 756                          ano_out=ano_out;
 757                        }
 758                      }
 759                    }
 760                    else if ((mes_out==4)||(mes_out==6)||(mes_out==9)||(mes_out==11))                   // Meses de 30 dias
 761                    {
 762                      if (dia_out>30)
 763                      {
 764                        dia_out=dia_out-30;
 765                        mes_out=mes_out+1;
 766                        ano_out=ano_out;          
 767                      }
 768                      else
 769                      {
 770                        mes_out=mes_out;
 771                        ano_out=ano_out;  
 772                      }
 773                    }
 774                    else if (mes_out==2)                                        // Febtrero Es biciesto?
 775                    {
 776          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 777                      ano_inT=ano_out+2000;
 778                      bisiesto=0;
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 14  

 779          
 780          
 781          /*            division=(ano_inT/4);
 782                      intpart = division;
 783                      decpart= ano_inT - (intpart*4);
 784            
 785            
 786                      if (decpart==0)
 787                      {
 788                        division=(ano_inT/10);
 789                          intpart = division;
 790                          decpart = ano_inT - (intpart*10);
 791                        if (decpart==0)
 792                        {
 793                          division=(ano_inT/40);
 794                            intpart = division;
 795                            decpart = ano_inT - (intpart*40);
 796                          if (decpart==0)
 797                          {
 798                            bisiesto=1;
 799                          }
 800                          else
 801                          {
 802                            bisiesto=0;
 803                          }
 804                        }
 805                        else
 806                        {
 807                          bisiesto=1;
 808                        }
 809                      }
 810          */
 811            /*          if ((ano_out==16)||(ano_out==20)||(ano_out==24)||(ano_out==28)||(ano_out==32)||(ano_out==36))
 812                      {
 813                        bisiesto=1;
 814                      }   
 815          
 816          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------          
 817                      if (bisiesto==1)
 818                      {
 819                        if (dia_out>29)
 820                        {
 821                          dia_out=dia_out-29;
 822                          mes_out=mes_out+1;
 823                          ano_out=ano_out;            
 824                        }
 825                        else
 826                        {
 827                          dia_out=dia_out;
 828                          mes_out=mes_out;
 829                          ano_out=ano_out;
 830                        }
 831                      }
 832                      else
 833                      {
 834                        if (dia_out>28)
 835                        {
 836                          dia_out=dia_out-28;
 837                          mes_out=mes_out+1;
 838                          ano_out=ano_out;                          
 839                        }
C51 COMPILER V9.59.0.0   CLOCK                                                             11/16/2021 16:26:51 PAGE 15  

 840                      }
 841            //-------------------------------------------------------------------------------------------------------
             ----------------------------------------
 842                    }
 843            
 844                  }
 845              }
 846          
 847          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 848            *(buffer+0x0b)=ano_out;
 849            *(buffer+0x0c)=mes_out;
 850            *(buffer+0x0d)=dia_out;
 851            *(buffer+0x0e)=hora_out;
 852            *(buffer+0x0f)=min_out;   
 853          //--------------------------------------------------------------------------------------------------------
             ---------------------------------------
 854            }
 855            
 856          
 857          }
 858          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2170    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      33
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
