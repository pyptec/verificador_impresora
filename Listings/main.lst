C51 COMPILER V9.59.0.0   MAIN                                                              10/06/2021 15:40:47 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          MAIN.C:  sistema verificador
   3          
   4          Diseñado Ing. Jaime Pedraza
   5          ------------------------------------------------------------------------------*/
   6          #include <main.h>
   7          extern unsigned char placa[];
   8          /*------------------------------------------------------------------------------
   9          interrupcion por timer 
  10          ValTimeOutCom se decrementa cada overflow de la interrupcion
  11          Timer_wait    Incrementa cada overflow de la interrrupcion
  12          ------------------------------------------------------------------------------*/
  13          void  timer0_int() interrupt 1 using 2
  14          {
  15   1            
  16   1            ValTimeOutCom--;
  17   1            Timer_wait++;
  18   1            TF0=0;
  19   1            
  20   1      }
  21          /*------------------------------------------------------------------------------
  22          ------------------------------------------------------------------------------*/
  23          void ini_timer(void)
  24          {
  25   1      
  26   1        TMOD=(TMOD & 0xF0) | 0x01;// configuro el reg TMOD sin precalador a 16 bits
  27   1          
  28   1        TH0=0X00;               //registro de la parte alta del timer0 de 16 bits                 *           
  29   1        TL0=0X00;               // registro de la parte baja del timer0
  30   1        TR0=1;                  // habilita el timer0 reg TCOM bit 4 para interrup
  31   1      
  32   1      }
  33          /*------------------------------------------------------------------------------
  34          ------------------------------------------------------------------------------*/
  35          void on_Timer0_Interrup(void)
  36          {
  37   1        TF0=0;                  //registro TCON bit 5 bandera de overflow 
  38   1        ET0=1;                  // enable interrupcion bit 1 del registro IENO
  39   1        
  40   1      }
  41          /*------------------------------------------------------------------------------
  42          ------------------------------------------------------------------------------*/
  43          void off_Timer0_Interrup(void)
  44          {
  45   1        ET0=0;                  // enable interrupcion bit 1 del registro IENO
  46   1        
  47   1      }
  48          /*------------------------------------------------------------------------------
  49          ------------------------------------------------------------------------------*/
  50          /*------------------------------------------------------------------------------
  51          _getkey waits until a character is received from the serial port.  This may not
  52          be the exact desired operation (for example if the buffer is empty, this
  53          function hangs waiting for a character to be received).
  54          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   MAIN                                                              10/06/2021 15:40:47 PAGE 2   

  55          char _getkey (void)
  56          {
  57   1      int k;
  58   1      
  59   1      do
  60   1        {
  61   2        k = com_getchar ();
  62   2        }
  63   1      while (k == -1);
  64   1      
  65   1      return ((unsigned char) k);
  66   1      }
  67          
  68          /*------------------------------------------------------------------------------
  69          ------------------------------------------------------------------------------*/
  70          char putchar (char c)
  71          {
  72   1      volatile unsigned int i;
  73   1      
  74   1      while (com_putchar (c) != 0)
  75   1        {
  76   2        for (i=0; i<1000; i++)
  77   2          {
  78   3          /*** DO NOTHING ***/
  79   3          }
  80   2        }
  81   1      
  82   1      return (c);
  83   1      }
  84          /*------------------------------------------------------------------------------
  85          escribir una cadena de datos por pto serie
  86          ------------------------------------------------------------------------------*/
  87          /*TEMPORALMENTE SIN OPERAR
  88          void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena)
  89          {
  90            unsigned char i,d;
  91              for(i=0;i<tamano_cadena;i++)
  92              {
  93                d=putchar(*buffer);
  94                buffer++;
  95              }
  96          }
  97          */
  98          /*------------------------------------------------------------------------------
  99          secuencia de inicio
 100          ------------------------------------------------------------------------------*/
 101          void inicia_board(void)
 102          {
 103   1      cond_ini_tibbo();             /* inicia tibbo*/
 104   1      cond_ini_clock();             /* inicia clock*/
 105   1      cond_ini_pto();               /*Inicializacion del pto*/
 106   1      Atascado=0;                   /*prendo el verificador*/
 107   1      sel_com=1;                    /*seleccionar el pto serie */
 108   1      lock=0;                       /*barrera off*/ 
 109   1        
 110   1      }
 111          /*------------------------------------------------------------------------------
 112          leo la configuracion en eeprom  y la cargo en registros fijos
 113          ------------------------------------------------------------------------------*/
 114          void variable_inicio()
 115          {
 116   1        
C51 COMPILER V9.59.0.0   MAIN                                                              10/06/2021 15:40:47 PAGE 3   

 117   1        ID_CLIENTE=rd_eeprom(0xa8,EE_ID_CLIENTE); 
 118   1        COD_PARK=rd_eeprom(0xa8,EE_ID_PARK);
 119   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 120   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 121   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 122   1        USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 123   1        COMPARACION_ACTIVA=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);
 124   1        QR_BARRAS=rd_eeprom(0xa8,EE_QR_BARRAS);
 125   1        Raspberry = rd_eeprom(0xa8,EE_TIPO_PANTALLA);
 126   1      }
 127          /*------------------------------------------------------------------------------
 128          Note that the two function above, _getkey and putchar, replace the library
 129          functions of the same name.  These functions use the interrupt-driven serial
 130          I/O routines in SIO.C.
 131          ------------------------------------------------------------------------------*/
 132          
 133          
 134          void main (void)
 135          {
 136   1        
 137   1        static unsigned char buffer[40];
 138   1        //unsigned char buffer_clock[]={0x02,0x30,0x30,0x30,0x30,0x30,0x35,0x30,0x30,0x30,0x30,0x03,0}; //dia,mes
             -,año,hora,minutos,SEGUNDOS,Dia de la semana
 139   1        unsigned char buffer1[13];
 140   1        
 141   1        unsigned char Length_trama;
 142   1      ini_timer();
 143   1      on_Timer0_Interrup(); 
 144   1      com_initialize ();                                                        /* initialize interrupt driven serial I/O */
 145   1      com_baudrate ();                                                          /* setup for 9600 baud */
 146   1      inicia_board();
 147   1      EA = 1;                                                                   /* Enable Interrupts */
 148   1      /*solo de pruebas */
 149   1      time_bit();
 150   1      //Delay_20us(33);
 151   1      time_mbit();
 152   1      tx_aux('a');  
 153   1      
 154   1      sel_Funcion();                                                            /*el pulsador funcion es precionadoa para entrar a programacio
             -n */
 155   1        if (DataIn==0)
 156   1        {
 157   2        menu();
 158   2        }
 159   1        variable_inicio();
 160   1      
 161   1        ValTimeOutCom=3;                                                        /*tiempo inicial para ver los sensores*/
 162   1        
 163   1        while (1)                                                               // Loop Principal               * 
 164   1        {   
 165   2          
 166   2                                  
 167   2            if (rx_ip==0)
 168   2            {
 169   3            
 170   3              Length_trama=recibe_cmd_Monitor(buffer1);
 171   3              Debug_Dividir_texto();  
 172   3              Valida_Trama_Monitor(buffer1,Length_trama);
 173   3              DebugBufferMF(buffer1,Length_trama,1);                                /*imprimo la trama recibida*/       
 174   3              Debug_txt_Tibbo(placa); 
 175   3              Debug_Dividir_texto();        
 176   3            }
C51 COMPILER V9.59.0.0   MAIN                                                              10/06/2021 15:40:47 PAGE 4   

 177   2              
 178   2              Lee_ticket();                                                   /*procedimiento de imprimir el ticket de entrada*/
 179   2            
 180   2              //Debug_txt_Tibbo((unsigned char *) "tiempo ");   /*msj longitud de la trama */
 181   2              //Debug_chr_Tibbo(ValTimeOutCom); 
 182   2              //Debug_txt_Tibbo((unsigned char *) " \r\n"); 
 183   2            
 184   2            if (busy==0)
 185   2            {
 186   3              
 187   3              Length_trama=recibe_port(buffer);                                   /*recibe informacion del pto paralelo*/
 188   3                                                
 189   3              //Debug_Dividir_texto();                                              /*division del texto */
 190   3              Debug_txt_Tibbo((unsigned char *) "Recibe trama pto:");         /*trama recibida pto paralelo */
 191   3              DebugBufferMF(buffer,Length_trama,1);                               /*imprimo la trama recibida*/
 192   3              Debug_txt_Tibbo((unsigned char *) " \r\n");
 193   3              Debug_txt_Tibbo((unsigned char *) "longitud de la trama:");   /*msj longitud de la trama */
 194   3              Debug_chr_Tibbo(Length_trama);                                      /*numero de caracteres recibidos*/
 195   3              Debug_txt_Tibbo((unsigned char *) " \r\n"); 
 196   3              //Debug_Dividir_texto();                                              /*divido el texto*/
 197   3              
 198   3              Valida_Trama_Pto(buffer,Length_trama);                              /*valido la informacion recibida */
 199   3               
 200   3            }
 201   2            msj_lcd_informativo();
 202   2        
 203   2        
 204   2        }
 205   1      
 206   1      }
 207          
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    493    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =     72      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    138    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
