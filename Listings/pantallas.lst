C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PANTALLAS
OBJECT MODULE PLACED IN .\Objects\pantallas.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pantallas.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\pantallas.lst) TABS(2) OBJECT(.\Objects\pantallas.obj)

line level    source

   1          #include<pantallas.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          
   5          sbit sel_com = P0^7;        //Micro switch  
   6          /* varibles externas*/
   7          extern  unsigned char Tipo_Vehiculo;  
   8          extern unsigned char  Raspberry;
   9          
  10          /*funciones externas*/
  11          extern char putchar (char c);
  12          extern void Block_read_Clock(unsigned char *datos_clock);
  13          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  14          extern void Debug_Dividir_texto();
  15          extern void clean_tx();
  16          //extern void serie_ascii_siceros_l(unsigned char *serie);
  17          extern void clear_buffer();
  18          extern void Delay_20us(unsigned int cnt);
  19          
  20          #define ERROR_LOOP              0XE0
  21          #define TARJETA_INVALIDA        0XE1
  22          #define TARJETA_SIN_FORMATO     0xDF
  23          #define ERROR_COD_PARK          0XE5
  24          #define SIN_INGRESO             0XE6
  25          #define NO_REGISTRA             0x04
  26          #define EXCEDE_HORARIO          0x07
  27          #define UN_MOMENTO              0x09
  28          #define EXCEDE_GRACIA           0XE8
  29          #define FUERA_DE_LINEA          0XB6
  30          #define LECTURA_WIEGAND         0xB0
  31          #define LECTURA_DE_TARJETAS     0xb0
  32          #define NO_PAGO                 0XE7
  33          #define DIRIJASE_CAJA           90
  34          
  35          #define INGRESO                 0xFA
  36          #define BIENVENIDO              0XFE
  37          #define GRACIAS                 0XFF
  38          
  39          #define NOTIFIQUE_EVP           'N'
  40          #define NO_NOTIFIQUE_EVP        'S'
  41          #define COMPARANDO_PLACA        'P'           /*msj de error de placa*/
  42          #define ENVIANDO_COD            'D'
  43          #define INFO1                   'I'
  44          #define INFO2                   'i'
  45          
  46          
  47          #define NUL                     0x00
  48          #define SOH                     0x01
  49          #define STX                     0x02
  50          
  51          #define CAN                     0X18
  52          
  53          
  54          /*------------------------------------------------------------------------------
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 2   

  55          transmite el caracter pto serie
  56          data_com = al caracter a escribir
  57          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  58          ------------------------------------------------------------------------------*/
  59          void tx_chrlcd (unsigned char data_com, unsigned char enable_char_add)
  60          {
  61   1        unsigned char d;
  62   1        
  63   1        d=putchar(data_com);
  64   1        if (enable_char_add != 0) 
  65   1          {d=putchar(0x00);}
  66   1      
  67   1          
  68   1      }
  69          /*------------------------------------------------------------------------------
  70          envia un msj asta null(0)
  71          msg= apuntador del msj
  72          enable_char_add = si esta en (1) envia un null. (0) adicional, si es (0) no envia caracter adicional
  73          ------------------------------------------------------------------------------*/
  74          void LCD_txt (unsigned char * msg,unsigned char enable_char_add )
  75          {
  76   1        unsigned char i;
  77   1        
  78   1        for (i=0; msg[i] != '\0'; i++)
  79   1        {
  80   2          tx_chrlcd(msg[i],enable_char_add);
  81   2        }
  82   1      }
  83          /*------------------------------------------------------------------------------
  84          Escribo el reloj en ascii en bloque 
  85          msg= apuntador del msj
  86          length_char longitud de la tram
  87          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  88          ------------------------------------------------------------------------------*/
  89          void LCD_txt_num_char(unsigned char * msg,unsigned char length_char, unsigned char enable_char_add)
  90          {
  91   1        unsigned char i;
  92   1         
  93   1        for (i=0; i<length_char; i++)
  94   1        {
  95   2          tx_chrlcd(msg[i],enable_char_add);
  96   2        }
  97   1      }
  98          /*------------------------------------------------------------------------------
  99          Escribo el reloj en ascii en bloque 
 100          AA 80 28 trama de inicio de configuracion de la pantalla
 101          07 numero de caracteres de la trama de reloj
 102          20 19 03 26 09 21 20  el dato del reloj
 103          ------------------------------------------------------------------------------*/
 104          void Reloj_Pantalla_Lcd()
 105          {
 106   1      
 107   1       unsigned char Ini_Clock_LCD   []={0xaa,0x80,0x28,0x07,0x20,0x00,0,0,0,0,20,0,0} ;
 108   1                sel_com=0;                                                                      /*switch del pto serie a la pantalla*/
 109   1                Block_read_Clock(Ini_Clock_LCD+5);                                              /*Leo el reloj programado*/
 110   1                //Debug_Dividir_texto();                                                          /*lineas de separacion del texto*/
 111   1                //DebugBufferMF(Ini_Clock_LCD,12,0);                                              /*muestra la trama por debug*/
 112   1                //Debug_Dividir_texto();                                                          /*linea de separacion de texto*/
 113   1                REN = 0;                                                                        /*inhabilita recepcion de datos*/
 114   1                LCD_txt_num_char(Ini_Clock_LCD,13,0);                                           /*cmd de inicializacion del reloj del lcd*
             -/
 115   1                                                            
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 3   

 116   1                REN = 1;                                                                        /*habilita recepcion de datos*/
 117   1                sel_com=1;                                                                      /*switch pto serie a verificador o expedidor */
 118   1      }
 119          void Raspberry_data (unsigned char *msjpantalla)
 120          {
 121   1        
 122   1        unsigned char i;
 123   1        unsigned char lenth_cadena;
 124   1        unsigned char d;
 125   1        
 126   1        
 127   1        lenth_cadena=strlen(msjpantalla);
 128   1        
 129   1        for (i=0; i < lenth_cadena ; i++)
 130   1        {
 131   2            
 132   2        
 133   2          d=putchar(*(msjpantalla + i));
 134   2          for (d=0; d<200; d++)
 135   2         {
 136   3         }
 137   2      
 138   2        }
 139   1          
 140   1      
 141   1        
 142   1      }
 143          /*------------------------------------------------------------------------------
 144          Rutina de msj de pantalla
 145          0xaa,0x80,0x18 cmd de inicio lcd
 146          0x01  numero de linea
 147          0x02  tiempo de duracion del msj en minutos si especifica (00)no hay msj en el lcd si es (ff) el msj const
             -ante
 148          0x00,0xnn numero de caracteres a impirmir
 149          ------------------------------------------------------------------------------*/
 150          void PantallaLCD(unsigned char cod_msg)
 151          {
 152   1      //unsigned char bar[15];
 153   1      unsigned char datos[40];
 154   1      //unsigned char Ini_LCD_Line_one   []={0xaa,0x80,CAN,SOH,STX,0x00} ;
 155   1      //unsigned char Ini_LCD_Line_two   []={0xaa,0x80,0x18,0x02,0x02,0x00} ;
 156   1      
 157   1        
 158   1      //unsigned char num_chr;
 159   1      
 160   1        
 161   1          sel_com=0;
 162   1        
 163   1          if (Raspberry==0)
 164   1          { 
 165   2            
 166   2            //LCD_txt (Ini_LCD_Line_one,0);
 167   2            
 168   2            switch (cod_msg)
 169   2            {
 170   3              /*
 171   3              case 'P':
 172   3                
 173   3                num_chr=strlen((unsigned char *) "ERROR: VALIDANDO PLACA... ");
 174   3                tx_chrlcd(0x00,0);
 175   3                tx_chrlcd(num_chr*2,0);
 176   3                LCD_txt ((unsigned char *)       "ERROR: VALIDANDO PLACA... ",1);
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 4   

 177   3                
 178   3                break;
 179   3      
 180   3              case ERROR_LOOP:
 181   3                
 182   3                num_chr=strlen((unsigned char *) "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ");  
 183   3                tx_chrlcd(0x00,0);
 184   3                tx_chrlcd(num_chr*2,0);
 185   3                LCD_txt ((unsigned char *)       "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ",1);
 186   3                
 187   3                break;
 188   3              
 189   3              case TARJETA_INVALIDA:
 190   3                
 191   3                num_chr=strlen((unsigned char *) "ERROR: TARJETA INVALIDA "); 
 192   3                tx_chrlcd(0x00,0);
 193   3                tx_chrlcd(num_chr*2,0);
 194   3                LCD_txt ((unsigned char *)       "ERROR: TARJETA INVALIDA ",1);
 195   3                
 196   3                break;
 197   3              
 198   3              case ERROR_COD_PARK:
 199   3          
 200   3                num_chr=strlen((unsigned char *) "TARJETA NO ES DEL PARQ. ");
 201   3                tx_chrlcd(0x00,0);
 202   3                tx_chrlcd(num_chr*2,0);
 203   3                LCD_txt ((unsigned char *)       "TARJETA NO ES DEL PARQ. ",1);
 204   3          
 205   3                break;
 206   3                
 207   3              case TARJETA_SIN_FORMATO:
 208   3          
 209   3                num_chr=strlen((unsigned char *) "TARJETA SIN FORMATO ");
 210   3                tx_chrlcd(0x00,0);
 211   3                tx_chrlcd(num_chr*2,0);
 212   3                LCD_txt((unsigned char *)        "TARJETA SIN FORMATO ",1);
 213   3      
 214   3                break;
 215   3                
 216   3              case SIN_PAGO:
 217   3          
 218   3                num_chr=strlen((unsigned char *) "TARJETA NO REGISTRA PAGO ");
 219   3                tx_chrlcd(0x00,0);
 220   3                tx_chrlcd(num_chr*2,0);
 221   3                LCD_txt ((unsigned char *)       "TARJETA NO REGISTRA PAGO ",1);
 222   3      
 223   3                break;
 224   3                  
 225   3              case EXCEDE_GRACIA:
 226   3          
 227   3                num_chr=strlen((unsigned char *) "EXCEDE TIEMPO DE GRACIA ");
 228   3                tx_chrlcd(0x00,0);
 229   3                tx_chrlcd(num_chr*2,0);
 230   3                LCD_txt ((unsigned char *)       "EXCEDE TIEMPO DE GRACIA ",1);
 231   3            
 232   3                break;
 233   3              
 234   3              case  FUERA_DE_LINEA:
 235   3                
 236   3                num_chr=strlen((unsigned char *) "FUERA DE LINEA ");
 237   3                tx_chrlcd(0x00,0);
 238   3                tx_chrlcd(num_chr*2,0);
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 5   

 239   3                LCD_txt((unsigned char *)        "FUERA DE LINEA ",1);
 240   3              
 241   3                break;
 242   3              
 243   3              case  BIENVENIDO:
 244   3                
 245   3                num_chr=strlen((unsigned char *) "ACERQUE SU TICKET ");
 246   3                tx_chrlcd(0x00,0);
 247   3                tx_chrlcd(num_chr*2,0);
 248   3                LCD_txt((unsigned char *)        "ACERQUE SU TICKET ",1);
 249   3                
 250   3                break;
 251   3              
 252   3              case GRACIAS:
 253   3                num_chr=strlen((unsigned char *) "GRACIAS ");
 254   3                tx_chrlcd(0x00,0);
 255   3                tx_chrlcd(num_chr*2,0);
 256   3                LCD_txt((unsigned char *)        "GRACIAS ",1);
 257   3                
 258   3                break;
 259   3              case  SIN_INGRESO:
 260   3                
 261   3                num_chr=strlen((unsigned char *) "ERROR: SIN INGRESO ");
 262   3                tx_chrlcd(0x00,0);
 263   3                tx_chrlcd(num_chr*2,0);
 264   3                LCD_txt((unsigned char *)        "ERROR: SIN INGRESO ",1);
 265   3                
 266   3                break;
 267   3              case INGRESO:
 268   3                serie_ascii_siceros_l(bar);
 269   3                strcpy(datos,"TICKET No.");
 270   3                strcat(datos,bar);
 271   3              
 272   3                num_chr=strlen(datos)+1;
 273   3               
 274   3              
 275   3                tx_chrlcd(0x00,0);
 276   3                tx_chrlcd(num_chr*2,0);
 277   3                LCD_txt_num_char(datos,num_chr,1);
 278   3                              
 279   3                break;
 280   3                */
 281   3        }
 282   2              sel_com=1;  
 283   2        }
 284   1          else
 285   1          {
 286   2            sel_com=0;   
 287   2               switch (cod_msg)
 288   2               {
 289   3                 case BIENVENIDO:
 290   3                  strcpy(datos,"a;85;ACERQUE SU TICKET\n\0");
 291   3                  Raspberry_data (datos);
 292   3                  break;
 293   3                  case GRACIAS:
 294   3                  strcpy(datos,"a;89;GRACIAS ..... \n\0");
 295   3                  Raspberry_data (datos);
 296   3                  break;
 297   3                  case NO_REGISTRA:
 298   3                  strcpy(datos,"a;97;No TIKET NO REGISTRADO \n\0");
 299   3                  Raspberry_data (datos);
 300   3                  break;
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 6   

 301   3                  case EXCEDE_HORARIO:
 302   3                  strcpy(datos,"a;88;EXCEDE HORARIO...\n\0");
 303   3                  Raspberry_data (datos);
 304   3                  
 305   3                  case UN_MOMENTO:
 306   3                  strcpy(datos,"a;95;UN MOMENTO .... \n\0");
 307   3                  Raspberry_data (datos);
 308   3                  break;
 309   3                  case ERROR_LOOP:
 310   3                  strcpy(datos,"a;96;SIN PRESENCIA VEHICULAR.... \n\0");
 311   3                  Raspberry_data (datos);
 312   3                  break;
 313   3                  
 314   3                  case NO_PAGO:
 315   3                  strcpy(datos,"a;90;NO REGISTRA PAGO.... \n\0");
 316   3                  Raspberry_data (datos);
 317   3                  break;
 318   3                  case DIRIJASE_CAJA:
 319   3                  strcpy(datos,"a;90;DIRIJASE A CAJA\n\0");
 320   3                  Raspberry_data (datos);
 321   3                      
 322   3                  break;
 323   3                  default:
 324   3                  break;
 325   3                  
 326   3               }
 327   2             sel_com=1;    
 328   2          }
 329   1      }
 330          void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer)
 331          {
 332   1        
 333   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
 334   1      unsigned char datos[40];
 335   1      
 336   1      unsigned char num_chr;
 337   1        
 338   1      sel_com=0;
 339   1        
 340   1          if (Raspberry==0)
 341   1          {
 342   2          
 343   2            
 344   2            switch (cod_msg)
 345   2            {
 346   3          
 347   3              case  LECTURA_DE_TARJETAS:
 348   3                LCD_txt (Ini_LCD_Line_one,0);
 349   3                num_chr=strlen((unsigned char *) "WIEGAND ");
 350   3                num_chr=num_chr+strlen(buffer)+1;
 351   3                tx_chrlcd(0x00,0);
 352   3                tx_chrlcd(num_chr*2,0);
 353   3                LCD_txt((unsigned char *)        "WIEGAND ",1);                       /*funcion q trasmite el msj al LCD  y el 
             -(1) coloca los caracteres NULL*/
 354   3                LCD_txt(buffer,1);                                                    /*funcion q trasmite el msj al LCD  y el (1) coloca los 
             -caracteres NULL*/
 355   3                
 356   3              
 357   3              
 358   3              
 359   3                break;
 360   3              
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/12/2021 16:30:59 PAGE 7   

 361   3              
 362   3            }
 363   2              sel_com=1;  
 364   2        }
 365   1          else 
 366   1          {
 367   2             sel_com=0;  
 368   2            
 369   2             switch (cod_msg)
 370   2             {
 371   3                case GRACIAS:
 372   3                  strcpy(datos,"a;92;GRACIAS ");
 373   3                  num_chr=strlen(buffer);
 374   3                  *(buffer+(num_chr-1))=0;
 375   3                  strcat(datos,buffer);
 376   3                  strcat(datos,"\n\0");
 377   3                  Raspberry_data (datos);
 378   3                
 379   3                  break;
 380   3                case  LECTURA_WIEGAND:
 381   3                  
 382   3                           
 383   3                  strcpy(datos,"a;98;WIEGAND ");
 384   3                       
 385   3                  strcat(datos,buffer);
 386   3                  
 387   3                  strcat(datos,"\n\0");
 388   3                  
 389   3               
 390   3                  Raspberry_data (datos);
 391   3                  
 392   3                
 393   3                  break;
 394   3               
 395   3             }
 396   2             sel_com=1; 
 397   2          }
 398   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    771    ----
   CONSTANT SIZE    =    274    ----
   XDATA SIZE       =   ----     122
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
