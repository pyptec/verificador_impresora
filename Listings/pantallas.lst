C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PANTALLAS
OBJECT MODULE PLACED IN .\Objects\pantallas.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pantallas.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\vrfcdor_impresora) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\pantallas.lst) TABS(2) OBJECT(.\Objects\pantallas.obj)

line level    source

   1          #include<pantallas.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          
   5          sbit sel_com = P0^7;        //Micro switch  
   6          /* varibles externas*/
   7          extern  unsigned char Tipo_Vehiculo;  
   8          extern unsigned char  Raspberry;
   9          
  10          /*funciones externas*/
  11          extern char putchar (char c);
  12          extern void Block_read_Clock(unsigned char *datos_clock);
  13          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  14          extern void Debug_Dividir_texto();
  15          extern void clean_tx();
  16          extern void serie_ascii_siceros_l(unsigned char *serie);
  17          extern void clear_buffer();
  18          
  19          #define ERROR_LOOP              0XE0
  20          #define TARJETA_INVALIDA        0XE1
  21          #define TARJETA_SIN_FORMATO     0xDF
  22          #define ERROR_COD_PARK          0XE5
  23          #define SIN_INGRESO             0XE6
  24          #define SIN_PAGO                0XE7
  25          #define EXCEDE_GRACIA           0XE8
  26          #define FUERA_DE_LINEA          0XB6
  27          #define LECTURA_DE_TARJETAS     0xB0
  28          
  29          #define INGRESO                 0xFA
  30          #define BIENVENIDO              0XFE
  31          #define GRACIAS                 0XFF
  32          
  33          #define NOTIFIQUE_EVP           'N'
  34          #define NO_NOTIFIQUE_EVP        'S'
  35          #define COMPARANDO_PLACA        'P'           /*msj de error de placa*/
  36          #define ENVIANDO_COD            'D'
  37          #define INFO1                   'I'
  38          #define INFO2                   'i'
  39          
  40          
  41          #define NUL                     0x00
  42          #define SOH                     0x01
  43          #define STX                     0x02
  44          
  45          #define CAN                     0X18
  46          
  47          
  48          /*------------------------------------------------------------------------------
  49          transmite el caracter pto serie
  50          data_com = al caracter a escribir
  51          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  52          ------------------------------------------------------------------------------*/
  53          void tx_chrlcd (unsigned char data_com, unsigned char enable_char_add)
  54          {
C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 2   

  55   1        unsigned char d;
  56   1        
  57   1        d=putchar(data_com);
  58   1        if (enable_char_add != 0) 
  59   1          {d=putchar(0x00);}
  60   1      
  61   1          
  62   1      }
  63          /*------------------------------------------------------------------------------
  64          envia un msj asta null(0)
  65          msg= apuntador del msj
  66          enable_char_add = si esta en (1) envia un null. (0) adicional, si es (0) no envia caracter adicional
  67          ------------------------------------------------------------------------------*/
  68          void LCD_txt (unsigned char * msg,unsigned char enable_char_add )
  69          {
  70   1        unsigned char i;
  71   1        
  72   1        for (i=0; msg[i] != '\0'; i++)
  73   1        {
  74   2          tx_chrlcd(msg[i],enable_char_add);
  75   2        }
  76   1      }
  77          /*------------------------------------------------------------------------------
  78          Escribo el reloj en ascii en bloque 
  79          msg= apuntador del msj
  80          length_char longitud de la tram
  81          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  82          ------------------------------------------------------------------------------*/
  83          void LCD_txt_num_char(unsigned char * msg,unsigned char length_char, unsigned char enable_char_add)
  84          {
  85   1        unsigned char i;
  86   1         
  87   1        for (i=0; i<length_char; i++)
  88   1        {
  89   2          tx_chrlcd(msg[i],enable_char_add);
  90   2        }
  91   1      }
  92          /*------------------------------------------------------------------------------
  93          Escribo el reloj en ascii en bloque 
  94          AA 80 28 trama de inicio de configuracion de la pantalla
  95          07 numero de caracteres de la trama de reloj
  96          20 19 03 26 09 21 20  el dato del reloj
  97          ------------------------------------------------------------------------------*/
  98          void Reloj_Pantalla_Lcd()
  99          {
 100   1      
 101   1       unsigned char Ini_Clock_LCD   []={0xaa,0x80,0x28,0x07,0x20,0x00,0,0,0,0,20,0,0} ;
 102   1                sel_com=0;                                                                      /*switch del pto serie a la pantalla*/
 103   1                Block_read_Clock(Ini_Clock_LCD+5);                                              /*Leo el reloj programado*/
 104   1                //Debug_Dividir_texto();                                                          /*lineas de separacion del texto*/
 105   1                //DebugBufferMF(Ini_Clock_LCD,12,0);                                              /*muestra la trama por debug*/
 106   1                //Debug_Dividir_texto();                                                          /*linea de separacion de texto*/
 107   1                REN = 0;                                                                        /*inhabilita recepcion de datos*/
 108   1                LCD_txt_num_char(Ini_Clock_LCD,13,0);                                           /*cmd de inicializacion del reloj del lcd*
             -/
 109   1                                                            
 110   1                REN = 1;                                                                        /*habilita recepcion de datos*/
 111   1                sel_com=1;                                                                      /*switch pto serie a verificador o expedidor */
 112   1      }
 113          void Raspberry_data (unsigned char *msjpantalla)
 114          {
 115   1        
C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 3   

 116   1        unsigned char i;
 117   1        unsigned char lenth_cadena;
 118   1        unsigned char d;
 119   1        
 120   1        
 121   1        lenth_cadena=strlen(msjpantalla);
 122   1        
 123   1        for (i=0; i < lenth_cadena ; i++)
 124   1        {
 125   2            
 126   2          for (d=0; d<100; d++)
 127   2         {
 128   3         }
 129   2          d=putchar(*(msjpantalla + i));
 130   2      
 131   2        }
 132   1        
 133   1          
 134   1          for (d=0; d<100; d++)
 135   1         {
 136   2          /*** DO NOTHING ***/
 137   2          }
 138   1        
 139   1      }
 140          /*------------------------------------------------------------------------------
 141          Rutina de msj de pantalla
 142          0xaa,0x80,0x18 cmd de inicio lcd
 143          0x01  numero de linea
 144          0x02  tiempo de duracion del msj en minutos si especifica (00)no hay msj en el lcd si es (ff) el msj const
             -ante
 145          0x00,0xnn numero de caracteres a impirmir
 146          ------------------------------------------------------------------------------*/
 147          void PantallaLCD(unsigned char cod_msg)
 148          {
 149   1      unsigned char bar[15];
 150   1      unsigned char datos[40];
 151   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,CAN,SOH,STX,0x00} ;
 152   1      unsigned char Ini_LCD_Line_two   []={0xaa,0x80,0x18,0x02,0x02,0x00} ;
 153   1      
 154   1        
 155   1      unsigned char num_chr;
 156   1      
 157   1        
 158   1          sel_com=0;
 159   1        
 160   1          if (Raspberry==0)
 161   1          {
 162   2            LCD_txt (Ini_LCD_Line_one,0);
 163   2            
 164   2            switch (cod_msg)
 165   2            {
 166   3          
 167   3              case 'P':
 168   3                
 169   3                num_chr=strlen((unsigned char *) "ERROR: VALIDANDO PLACA... ");
 170   3                tx_chrlcd(0x00,0);
 171   3                tx_chrlcd(num_chr*2,0);
 172   3                LCD_txt ((unsigned char *)       "ERROR: VALIDANDO PLACA... ",1);
 173   3                
 174   3                break;
 175   3      
 176   3              case ERROR_LOOP:
C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 4   

 177   3                
 178   3                num_chr=strlen((unsigned char *) "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ");  
 179   3                tx_chrlcd(0x00,0);
 180   3                tx_chrlcd(num_chr*2,0);
 181   3                LCD_txt ((unsigned char *)       "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ",1);
 182   3                
 183   3                break;
 184   3              
 185   3              case TARJETA_INVALIDA:
 186   3                
 187   3                num_chr=strlen((unsigned char *) "ERROR: TARJETA INVALIDA "); 
 188   3                tx_chrlcd(0x00,0);
 189   3                tx_chrlcd(num_chr*2,0);
 190   3                LCD_txt ((unsigned char *)       "ERROR: TARJETA INVALIDA ",1);
 191   3                
 192   3                break;
 193   3              
 194   3              case ERROR_COD_PARK:
 195   3          
 196   3                num_chr=strlen((unsigned char *) "TARJETA NO ES DEL PARQ. ");
 197   3                tx_chrlcd(0x00,0);
 198   3                tx_chrlcd(num_chr*2,0);
 199   3                LCD_txt ((unsigned char *)       "TARJETA NO ES DEL PARQ. ",1);
 200   3          
 201   3                break;
 202   3                
 203   3              case TARJETA_SIN_FORMATO:
 204   3          
 205   3                num_chr=strlen((unsigned char *) "TARJETA SIN FORMATO ");
 206   3                tx_chrlcd(0x00,0);
 207   3                tx_chrlcd(num_chr*2,0);
 208   3                LCD_txt((unsigned char *)        "TARJETA SIN FORMATO ",1);
 209   3      
 210   3                break;
 211   3                
 212   3              case SIN_PAGO:
 213   3          
 214   3                num_chr=strlen((unsigned char *) "TARJETA NO REGISTRA PAGO ");
 215   3                tx_chrlcd(0x00,0);
 216   3                tx_chrlcd(num_chr*2,0);
 217   3                LCD_txt ((unsigned char *)       "TARJETA NO REGISTRA PAGO ",1);
 218   3      
 219   3                break;
 220   3                  
 221   3              case EXCEDE_GRACIA:
 222   3          
 223   3                num_chr=strlen((unsigned char *) "EXCEDE TIEMPO DE GRACIA ");
 224   3                tx_chrlcd(0x00,0);
 225   3                tx_chrlcd(num_chr*2,0);
 226   3                LCD_txt ((unsigned char *)       "EXCEDE TIEMPO DE GRACIA ",1);
 227   3            
 228   3                break;
 229   3              
 230   3              case  FUERA_DE_LINEA:
 231   3                
 232   3                num_chr=strlen((unsigned char *) "FUERA DE LINEA ");
 233   3                tx_chrlcd(0x00,0);
 234   3                tx_chrlcd(num_chr*2,0);
 235   3                LCD_txt((unsigned char *)        "FUERA DE LINEA ",1);
 236   3              
 237   3                break;
 238   3              
C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 5   

 239   3              case  BIENVENIDO:
 240   3                
 241   3                num_chr=strlen((unsigned char *) "ACERQUE SU TICKET ");
 242   3                tx_chrlcd(0x00,0);
 243   3                tx_chrlcd(num_chr*2,0);
 244   3                LCD_txt((unsigned char *)        "ACERQUE SU TICKET ",1);
 245   3                
 246   3                break;
 247   3              
 248   3              case GRACIAS:
 249   3                num_chr=strlen((unsigned char *) "GRACIAS ");
 250   3                tx_chrlcd(0x00,0);
 251   3                tx_chrlcd(num_chr*2,0);
 252   3                LCD_txt((unsigned char *)        "GRACIAS ",1);
 253   3                
 254   3                break;
 255   3              case  SIN_INGRESO:
 256   3                
 257   3                num_chr=strlen((unsigned char *) "ERROR: SIN INGRESO ");
 258   3                tx_chrlcd(0x00,0);
 259   3                tx_chrlcd(num_chr*2,0);
 260   3                LCD_txt((unsigned char *)        "ERROR: SIN INGRESO ",1);
 261   3                
 262   3                break;
 263   3              case INGRESO:
 264   3                serie_ascii_siceros_l(bar);
 265   3                strcpy(datos,"TICKET No.");
 266   3                strcat(datos,bar);
 267   3              
 268   3                num_chr=strlen(datos)+1;
 269   3               
 270   3              
 271   3                tx_chrlcd(0x00,0);
 272   3                tx_chrlcd(num_chr*2,0);
 273   3                LCD_txt_num_char(datos,num_chr,1);
 274   3                              
 275   3                break;
 276   3        }
 277   2              sel_com=1;  
 278   2        }
 279   1          else
 280   1          {
 281   2            sel_com=0;   
 282   2               switch (cod_msg)
 283   2               {
 284   3                 case BIENVENIDO:
 285   3                  strcpy(datos,"a;03;ACERQUE SU TICKET\n\0");
 286   3                  Raspberry_data (datos);
 287   3                  break;
 288   3                  case GRACIAS:
 289   3                  strcpy(datos,"a;03;GRACIAS \n\0");
 290   3                  Raspberry_data (datos);
 291   3                  break;
 292   3                  
 293   3               }
 294   2             sel_com=1;    
 295   2          }
 296   1      }
 297          void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer)
 298          {
 299   1        
 300   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
C51 COMPILER V9.59.0.0   PANTALLAS                                                         10/06/2021 15:40:49 PAGE 6   

 301   1      
 302   1      
 303   1      unsigned char num_chr;
 304   1        
 305   1      sel_com=0;
 306   1        
 307   1          //if (Raspberry==0)
 308   1          //{
 309   1          
 310   1            
 311   1            switch (cod_msg)
 312   1            {
 313   2          
 314   2              case  LECTURA_DE_TARJETAS:
 315   2                LCD_txt (Ini_LCD_Line_one,0);
 316   2                num_chr=strlen((unsigned char *) "WIEGAND ");
 317   2                num_chr=num_chr+strlen(buffer)+1;
 318   2                tx_chrlcd(0x00,0);
 319   2                tx_chrlcd(num_chr*2,0);
 320   2                LCD_txt((unsigned char *)        "WIEGAND ",1);                       /*funcion q trasmite el msj al LCD  y el 
             -(1) coloca los caracteres NULL*/
 321   2                LCD_txt(buffer,1);                                                    /*funcion q trasmite el msj al LCD  y el (1) coloca los 
             -caracteres NULL*/
 322   2                
 323   2              
 324   2              
 325   2              
 326   2                break;
 327   2              
 328   2              
 329   2        }
 330   1              sel_com=1;  
 331   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1086    ----
   CONSTANT SIZE    =    343    ----
   XDATA SIZE       =   ----     112
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
